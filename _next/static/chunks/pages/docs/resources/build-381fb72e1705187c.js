(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4880],{8472:function(s,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/build",function(){return o(740)}])},740:function(s,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return r}});var a=o(5893),e=o(1151);function t(s){let n=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",hr:"hr",pre:"pre"},(0,e.ah)(),s.components),{Intro:o,Properties:t,Property:r}=n;return o||i("Intro",!0),t||i("Properties",!0),r||i("Property",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{children:["Build ",(0,a.jsx)(n.code,{children:"build"})]}),"\n",(0,a.jsxs)(o,{children:[(0,a.jsxs)(n.p,{children:["Builds containers or applications that can be used in blueprints. The build stanza runs a ",(0,a.jsx)(n.code,{children:"docker build"}),"\nusing the ",(0,a.jsx)(n.code,{children:"dockerfile"})," or ",(0,a.jsx)(n.code,{children:"context"})," defined in the ",(0,a.jsx)(n.code,{children:"container"})," stanza. You can use\nthis feature to build container images that can be started directly using the ",(0,a.jsx)(n.code,{children:"container"})," resource,\nor copied to ",(0,a.jsx)(n.code,{children:"nomad"})," or ",(0,a.jsx)(n.code,{children:"kubernetes"}),"."]}),(0,a.jsxs)(n.p,{children:["In addition to building containers, ",(0,a.jsx)(n.code,{children:"build"})," blocks can be used to build application code in a docker\ncontainer, the product of which can be copied to the local file system using the optional ",(0,a.jsx)(n.code,{children:"output"})," stanza."]})]}),"\n",(0,a.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)(r,{name:"container",type:"#container",value:"",children:(0,a.jsx)(n.p,{children:"Build a container from the given file and context.\nImages are cached in the local Docker engine using the following convention."})}),(0,a.jsx)(r,{name:"output",type:"#output",value:"",children:(0,a.jsx)(n.p,{children:"Copy artifacts from the built container image to the local filesystem."})})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"container",children:"container"}),"\n",(0,a.jsx)(n.pre,{language:"hcl",code:'container {\n  dockerfile = "Dockerfile"\n  context    = "./src"\n}\n',children:(0,a.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">container</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  dockerfile </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Dockerfile&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  context    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./src&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)(r,{name:"dockerfile",type:"string",value:"Dockerfile",children:(0,a.jsx)(n.p,{children:"Docker file to use for the build."})}),(0,a.jsx)(r,{name:"context",type:"string",required:"true",value:"",children:(0,a.jsx)(n.p,{children:"Path to the context for the build."})}),(0,a.jsx)(r,{name:"tag",type:"string",value:"",children:(0,a.jsx)(n.p,{children:"Tag to tag the resulting image with."})}),(0,a.jsx)(r,{name:"args",type:"map[string]string",value:"",children:(0,a.jsx)(n.p,{children:"Build args to pass to the build."})})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"output",children:"output"}),"\n",(0,a.jsx)(n.pre,{language:"hcl",code:'output {\n  source = "/bin/myapp"\n  destination = "${data("local_app")}/bin"\n}\n',children:(0,a.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/bin/myapp&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">data</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;local_app&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)(r,{name:"source",type:"string",value:"",children:(0,a.jsx)(n.p,{children:"The source directory or file to be copied from the built container"})}),(0,a.jsx)(r,{name:"destination",type:"string",value:"",children:(0,a.jsx)(n.p,{children:"The location to copy the files or directory to"})})]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"Container build"}),"\n",(0,a.jsx)(n.pre,{language:"hcl",code:'resource "build" "app" {\n  container {\n    dockerfile = "Dockerfile"\n    context    = "./src"\n  }\n}\n\nresource "container" "app" {\n  image {\n    name = resource.build.app.image\n  }\n\n  command = ["/bin/app"]\n\n  port {\n    local  = 9090\n    remote = 9090\n    host   = 9090\n  }\n\n  network {\n    id = resource.network.onprem.meta.id\n  }\n}\n',children:(0,a.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;build&quot; &quot;app&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">container</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    dockerfile </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Dockerfile&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    context    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./src&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;app&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">build</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">app</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">image</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;/bin/app&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    local  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span><span style="color: var(--shiki-color-text)">    remote </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span><span style="color: var(--shiki-color-text)">    host   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">onprem</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">meta</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.p,{children:"Application build"}),"\n",(0,a.jsx)(n.pre,{language:"hcl",code:'resource "build" "app" {\n  container {\n    dockerfile = "Dockerfile"\n    context    = "./src"\n  }\n\n  output {\n    source = "/go/src/github.com/jumppad-labs/jumppad/bin"\n    destination = "${data("local_app")}/bin"\n  }\n}\n\nresource "local_exec" "app" {\n  command = ["jumppad", "up", "./config"]\n}\n',children:(0,a.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;build&quot; &quot;app&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">container</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    dockerfile </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Dockerfile&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    context    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./src&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/go/src/github.com/jumppad-labs/jumppad/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">data</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;local_app&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;local_exec&quot; &quot;app&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;jumppad&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;up&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;./config&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var r=!0;function i(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,e.ah)(),s.components);return n?(0,a.jsx)(n,Object.assign({},s,{children:(0,a.jsx)(t,s)})):t(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=8472)}),_N_E=s.O()}]);