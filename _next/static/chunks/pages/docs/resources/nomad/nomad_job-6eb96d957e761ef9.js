(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[272],{7606:function(s,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/nomad/nomad_job",function(){return n(4831)}])},4831:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return l}});var o=n(5893),a=n(1151),r=n(8691);function t(s){let e=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",pre:"pre",hr:"hr"},(0,a.ah)(),s.components),{Intro:n,Properties:t,Property:l}=e;return n||c("Intro",!0),t||c("Properties",!0),l||c("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{children:["Nomad Job ",(0,o.jsx)(e.code,{children:"nomad_job"})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"nomad_job"})," resource allows you to apply one or more Nomad job files to\na cluster."]}),(0,o.jsxs)(e.p,{children:["Jumppad monitors changes to the jobs defined in the ",(0,o.jsx)(e.code,{children:"paths"})," property and\nautomatically recreates this resource when ",(0,o.jsx)(e.code,{children:"jumppad up"})," is called."]})]}),"\n",(0,o.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(l,{name:"cluster",type:"nomad_cluster",required:"true",value:"",children:[(0,o.jsx)(e.p,{children:"The reference to a cluster to apply the jobs to. Nomad jobs\nare only applied when the referenced cluster is created and healthy."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  resource "nomad_job" "example" {\n    cluster = resource.nomad_cluster.dev\n    ...\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_job&quot; &quot;example&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    cluster </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span></span>\n<span><span style="color: var(--shiki-color-text)">    ...</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsx)(l,{name:"paths",type:"[]string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"Paths to the Nomad job files to apply to the cluster."})}),(0,o.jsx)(l,{name:"health_check",type:"#health_check",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Optional health check to perform after the jobs have been applied, this resource\nwill not complete until the health checks are passing."})})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"health_check",children:"health_check"}),"\n",(0,o.jsx)(e.p,{children:"A health_check stanza allows the definition of a health check which must pass before the resource is marked as successfully created."}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'health_check {\n  timeout = "60s"\n  jobs = ["example"]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;60s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  jobs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;example&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(l,{name:"timeout",type:"duration",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The maximum duration to wait before marking the health check as failed.\nExpressed as a Go duration, e.g. ",(0,o.jsx)(e.code,{children:"1s"})," = 1 second, ",(0,o.jsx)(e.code,{children:"100ms"})," = 100 milliseconds."]})}),(0,o.jsx)(l,{name:"jobs",type:"[]string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:'An array of nomad jobs that must be marked as "Running" by the Nomad\nserver.'})})]}),"\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "nomad_cluster" "dev" {\n  network {\n    id = resource.network.cloud.meta.id\n  }\n}\n\nresource "nomad_job" "example" {\n  cluster = resource.nomad_cluster.dev.meta.id\n\n  paths = ["./app_config/example1.nomad"]\n\n  health_check {\n    timeout    = "60s"\n    nomad_jobs = ["example"]\n  }\n}\n\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_cluster&quot; &quot;dev&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">meta</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_job&quot; &quot;example&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  cluster </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">meta</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  paths </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;./app_config/example1.nomad&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;60s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    nomad_jobs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;example&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span></span>'})})]})}var l=!0;function c(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(t,s)})):t(s)}},8691:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({h2:"h2",p:"p",code:"code",a:"a"},(0,a.ah)(),s.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsxs)(e.p,{children:["In addition to the main properties, all resources have ",(0,o.jsx)(e.code,{children:"meta"})," properties, such\nas the ",(0,o.jsx)(e.code,{children:"id"})," of the resource. To see the list of these properties please see the\n",(0,o.jsx)(e.code,{children:"Meta Properties"})," section in the documentation ",(0,o.jsx)(e.a,{href:"/docs/resources/meta",children:"/docs/resources/meta"}),"."]})]})}var t=!0;e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=7606)}),_N_E=s.O()}]);