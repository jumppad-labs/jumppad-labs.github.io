(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5856],{3926:function(s,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/k8s/kubernetes_cluster",function(){return n(6129)}])},6129:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return k}});var o=n(5893),a=n(1151),r=n(8691),t=n(7206),i=n(1575),l=n(5312),p=n(6600),c=n(4699);function h(s){let e=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",pre:"pre",h3:"h3",ul:"ul",li:"li"},(0,a.ah)(),s.components),{Intro:n,YouTube:h,Properties:k,Property:u}=e;return n||d("Intro",!0),k||d("Properties",!0),u||d("Property",!0),h||d("YouTube",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{children:["Kubernetes Cluster ",(0,o.jsx)(e.code,{children:"k8s_cluster"})]}),"\n",(0,o.jsx)(n,{children:(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"kubernetes_cluster"})," resource allows you to create immutable Kubernetes\nclusters running in Docker containers using K3s."]})}),"\n",(0,o.jsx)(h,{id:"09kTg0n7-ac"}),"\n",(0,o.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(k,{children:[(0,o.jsx)(u,{name:"network",type:"#network_attachment",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"Network attaches the container to an existing network defined in a separate stanza.\nThis block can be specified multiple times to attach the container\nto multiple networks."})}),(0,o.jsx)(u,{name:"image",type:"#image",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Image defines a Docker image to use when creating the container. By default the nomad\ncluster resource will be created using the latest Jumppad container image."})}),(0,o.jsxs)(u,{name:"environment",type:"map[string]string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"An env stanza allows you to set environment variables in the container. This stanza can be specified multiple times."}),(0,o.jsx)(e.pre,{language:"hcl",code:'env {\n  key   = "PATH"\n  value = "/usr/local/bin"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">env</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  key   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;PATH&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/usr/local/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(u,{name:"volume",type:"#volume",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Additional volume to mount to the server and client nodes."}),(0,o.jsx)(e.pre,{language:"hcl",code:'volume {\n  source = "./mydirectory"\n  destination = "/path_in_container"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydirectory&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/path_in_container&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(u,{name:"copy_image",type:"#image",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Docker image in the local Docker image cache to copy to the cluster on creation.\nThis image is added to the Nomad clients docker cache enabling jobs to use\nimages that may not be in the local registry."}),(0,o.jsxs)(e.p,{children:["Jumppad tracks changes to copied images, should the image change running\n",(0,o.jsx)(e.code,{children:"jumppad up"})," would push any changes to the cluster automatically."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'copy_image {\n  name = "mylocalimage:versoin"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">copy_image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;mylocalimage:versoin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(u,{name:"port",type:"#port",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A port stanza allows you to expose container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(e.pre,{language:"hcl",code:"port {\n  local = 80\n  host  = 8080\n}\n",children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  local </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">80</span></span>\n<span><span style="color: var(--shiki-color-text)">  host  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8080</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(u,{name:"port_range",type:"#port_range",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A port_range stanza allows you to expose a range of container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(e.p,{children:"The following example would create 11 ports from 80 to 90 (inclusive) and expose them to the host machine."}),(0,o.jsx)(e.pre,{language:"hcl",code:'port {\n  range       = "80-90"\n  enable_host = true\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  range       </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;80-90&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  enable_host </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(u,{name:"api_port",type:"int",required:"false",value:"443",children:(0,o.jsxs)(e.p,{children:["Port to expose the Kubernetes API on the host. By default this uses the standard\napi port ",(0,o.jsx)(e.code,{children:"443"}),"; however, if you are running multiple kubernetes instances\nyou will need to override this value."]})}),(0,o.jsx)(u,{name:"kubeconfig",type:"int",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"Path to the Kubenetes config file that can be used to interact with the\ncluster."})}),(0,o.jsx)(u,{name:"connector_port",type:"int",required:"false",value:"",readonly:!0,children:(0,o.jsxs)(e.p,{children:["The port where the Jumppad connector is exposed to the host, this property\nis requied by the ",(0,o.jsx)(e.code,{children:"ingress"})," resource and is not generally needed when\nbuilding blueprints."]})}),(0,o.jsxs)(u,{name:"fqrn",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(e.p,{children:"The fully qualified resource name for the Nomad server, this value can be\nused to address the server from the Docker network. It is also the name\nof the Docker container."}),(0,o.jsx)(e.pre,{code:"  server.name.k8s-cluster.jumpad.dev\n",children:(0,o.jsx)(e.code,{children:"  server.name.k8s-cluster.jumpad.dev\n"})})]}),(0,o.jsxs)(u,{name:"external_ip",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(e.p,{children:["Local IP address of the Nomad server, this property can be used to set the\n",(0,o.jsx)(e.code,{children:"NOAMD_ADDR"})," on the Jumppad client."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'  output "NOMAD_ADDR" {\n    value = "http://${resource.nomad_cluster.dev.external_ip}:${resource.nomad_cluster.dev.api_port}"\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-token-string-expression)"> &quot;NOMAD_ADDR&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://</span><span style="color: var(--shiki-token-keyword)">${resource</span><span style="color: var(--shiki-token-function)">.nomad_cluster.dev.external_ip</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">:</span><span style="color: var(--shiki-token-keyword)">${resource</span><span style="color: var(--shiki-token-function)">.nomad_cluster.dev.api_port</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]})]}),"\n",(0,o.jsx)(t.default,{}),"\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(l.default,{}),"\n",(0,o.jsx)(p.default,{}),"\n",(0,o.jsx)(c.default,{}),"\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.h3,{children:"Simple cluster"}),"\n",(0,o.jsx)(e.p,{children:"The following example creates a single node Kubernetes cluster and sets an\noutput to the config path."}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "network" "cloud" {\n  subnet = "10.5.0.0/16"\n}\n\nresource "k8s_cluster" "k3s" {\n  network {\n    id = resource.network.cloud.id\n  }\n}\n\noutput "KUBECONFIG" {\n  value = resource.k8s_cluster.k3s.kubeconfig\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;network&quot; &quot;cloud&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  subnet </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.5.0.0/16&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;k8s_cluster&quot; &quot;k3s&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-token-string-expression)"> &quot;KUBECONFIG&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">kubeconfig</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(e.h3,{children:"Full Example"}),"\n",(0,o.jsx)(e.p,{children:"The following example creates a Kubernetes cluster and applies a Helm chart\nfrom a remote repository, a local Kubernetes deployment, and configures ingress\nresources for both the Helm chart and local deployment."}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "network" "cloud" {\n  subnet = "10.5.0.0/16"\n}\n\nresource "k8s_cluster" "k3s" {\n  driver = "k3s" // default\n\n  nodes = 1 // default\n\n  network {\n    id = resource.network.cloud.id\n  }\n\n  copy_image {\n    name = "shipyardrun/connector:v0.1.0"\n  }\n}\n\nresource "k8s_config" "fake_service" {\n  cluster = resource.k8s_cluster.k3s.id\n\n  paths = ["./fake_service.yaml"]\n\n  health_check {\n    timeout = "240s"\n    pods    = ["app.kubernetes.io/name=fake-service"]\n  }\n}\n\nresource "helm" "vault" {\n  cluster = resource.k8s_cluster.k3s.id\n\n  repository {\n    name = "hashicorp"\n    url  = "https://helm.releases.hashicorp.com"\n  }\n\n  chart   = "hashicorp/vault"\n  version = "v0.18.0"\n\n  values = "./helm/vault-values.yaml"\n\n  health_check {\n    timeout = "240s"\n    pods    = ["app.kubernetes.io/name=vault"]\n  }\n}\n\nresource "ingress" "vault_http" {\n  port = 18200\n\n  target {\n    id   = resource.k8s_cluster.k3s.id\n    port = 8200\n\n    config = {\n      service   = "vault"\n      namespace = "default"\n    }\n  }\n}\n\nresource "ingress" "fake_service" {\n  port = 19090\n\n  target {\n    id   = resource.k8s_cluster.k3s.id\n    port = 9090\n\n    config = {\n      service   = "fake-service"\n      namespace = "default"\n    }\n  }\n}\n\noutput "VAULT_ADDR" {\n  value = resource.ingress.vault_http.address\n}\n\noutput "KUBECONFIG" {\n  value = resource.k8s_cluster.k3s.kubeconfig\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;network&quot; &quot;cloud&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  subnet </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.5.0.0/16&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;k8s_cluster&quot; &quot;k3s&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  driver </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;k3s&quot;</span><span style="color: var(--shiki-color-text)"> // default</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  nodes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> // default</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">copy_image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;shipyardrun/connector:v0.1.0&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;k8s_config&quot; &quot;fake_service&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  cluster </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  paths </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;./fake_service.yaml&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;240s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    pods    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;app.kubernetes.io/name=fake-service&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;helm&quot; &quot;vault&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  cluster </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">repository</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;hashicorp&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    url  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;https://helm.releases.hashicorp.com&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  chart   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;hashicorp/vault&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  version </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;v0.18.0&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  values </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./helm/vault-values.yaml&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;240s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    pods    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;app.kubernetes.io/name=vault&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;vault_http&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">18200</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8200</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      service   = &quot;vault&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      namespace = &quot;default&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;fake_service&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">19090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      service   = &quot;fake-service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      namespace = &quot;default&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-token-string-expression)"> &quot;VAULT_ADDR&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">ingress</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">vault_http</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">address</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-token-string-expression)"> &quot;KUBECONFIG&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">kubeconfig</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(e.h2,{id:"image_caching",children:"Image Caching"}),"\n",(0,o.jsx)(e.p,{children:"Nomad clusters do not share the local machines Docker image cache. Each\nnode in a cluster has it's own unqiue cache."}),"\n",(0,o.jsx)(e.p,{children:"To save bandwidth all containers launched in the Nomad cluster pulled through\nan image cache that runs in Docker. After the first pull all images are subsequently\npulled from the image cache not the public internet. This cache is global to\nall Nomad and Kubernetes clusters created with Jumppad."}),"\n",(0,o.jsx)(e.p,{children:"Currently images from the following registries are cached:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"k8s.gcr.io"}),"\n",(0,o.jsx)(e.li,{children:"gcr.io"}),"\n",(0,o.jsx)(e.li,{children:"asia.gcr.io"}),"\n",(0,o.jsx)(e.li,{children:"eu.gcr.io"}),"\n",(0,o.jsx)(e.li,{children:"us.gcr.io"}),"\n",(0,o.jsx)(e.li,{children:"quay.io"}),"\n",(0,o.jsx)(e.li,{children:'ghcr.io"'}),"\n",(0,o.jsx)(e.li,{children:"docker.io"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["To clear the cache, you can use the ",(0,o.jsx)(e.code,{children:"jumppad purge"}),"."]})]})}var k=!0;function d(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(h,s)})):h(s)}},1575:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"image",children:"image"}),"\n",(0,o.jsx)(e.p,{children:"Image defines a Docker image used when creating this container. An Image can be stored in a public or a private repository."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["Name of the image to use when creating the container, can either be the full canonical name or short name for Docker official images.\ne.g. ",(0,o.jsx)(e.code,{children:"consul:v1.6.1"})," or ",(0,o.jsx)(e.code,{children:"docker.io/consul:v1.6.1"}),"."]})}),(0,o.jsx)(r,{name:"username",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Username to use when connecting to a private image repository"})}),(0,o.jsxs)(r,{name:"password",type:"string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Password to use when connecting to a private image repository, for both username and password interpolated environment variables can be used\nin place of static values."}),(0,o.jsx)(e.pre,{language:"hcl",code:'image {\n  name = "myregistry.io/myimage:latest"\n  username = env("REGISTRY_USERNAME")\n  password = env("REGISTRY_PASSWORD")\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myregistry.io/myimage:latest&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  username </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_USERNAME&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">  password </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_PASSWORD&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})]})]})}var t=!0;function i(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},8691:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({h2:"h2",p:"p",code:"code",a:"a"},(0,a.ah)(),s.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsxs)(e.p,{children:["In addition to the main properties, all resources have meta properties, such\nas the ",(0,o.jsx)(e.code,{children:"id"})," of the resource. To see the list of these properties please see the\n",(0,o.jsx)(e.code,{children:"Meta Properties"})," section in the documentation ",(0,o.jsx)(e.a,{href:"/docs/resources/meta",children:"/docs/resources/meta"}),"."]})]})}var t=!0;e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},7206:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"network_attachment",children:"network_attachment"}),"\n",(0,o.jsx)(e.p,{children:"Network attachment defines a network to which the container is attached."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(r,{name:"id",type:"string",required:"true",value:"",children:[(0,o.jsxs)(e.p,{children:["ID of the network to attach the container to, specified in reference format. e.g. to attach to a network called ",(0,o.jsx)(e.code,{children:"cloud"})]}),(0,o.jsx)(e.pre,{language:"hcl",code:'network {\n  id = "network.cloud"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"ip_address",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Static IP address to assign container for the network, the ip address must be within range defined by the network subnet.\nIf this parameter is omitted an IP address will be automatically assigned."})}),(0,o.jsxs)(r,{name:"aliases",type:"[]string",required:"false",value:"",children:[(0,o.jsxs)(e.p,{children:["Aliases allow alternate names to specified for the container. Aliases can be used to reference a container across the network, the container\nwill respond to ping and other network resolution using the primary assigned name ",(0,o.jsx)(e.code,{children:"[name].container.shipyard.run"})," and the aliases."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'network {\n  name    = "network.cloud"\n  aliases = [\n    "alt1.container.jumppad.dev", \n    "alt2.container.jumppad.dev"\n  ]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  aliases </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt1.container.jumppad.dev&quot;</span><span style="color: var(--shiki-color-text)">, </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt2.container.jumppad.dev&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  ]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"Name will equal the name of the network as created by jumppad."})})]})]})}var t=!0;function i(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},6600:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"port",children:"port"}),"\n",(0,o.jsx)(e.p,{children:"A port stanza defines host to container communications"}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"local",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The local port in the container."})}),(0,o.jsx)(r,{name:"host",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The host port to map the local port to."})}),(0,o.jsx)(r,{name:"protocol",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:'The protocol to use when exposing the port, can be "tcp", or "udp".'})}),(0,o.jsx)(r,{name:"open_in_browser",type:"string",required:"false",value:"/",children:(0,o.jsx)(e.p,{children:"Should a browser window be automatically opened when this resource is created. Browser windows will open at the path specified by this property."})})]})]})}var t=!0;function i(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},4699:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"port_range",children:"port_range"}),"\n",(0,o.jsx)(e.p,{children:"A port_range stanza defines host to container communications by exposing a range of ports for the container."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"range",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The port range to expose, e.g, ",(0,o.jsx)(e.code,{children:"8080-8082"})," would expose the ports ",(0,o.jsx)(e.code,{children:"8080"}),", ",(0,o.jsx)(e.code,{children:"8081"}),", ",(0,o.jsx)(e.code,{children:"8082"}),"."]})}),(0,o.jsx)(r,{name:"enable_host",type:"bool",required:"false",value:"false",children:(0,o.jsx)(e.p,{children:"The host port to map the local port to."})}),(0,o.jsx)(r,{name:"protocol",type:"string",required:"false",value:"tcp",children:(0,o.jsx)(e.p,{children:'The protocol to use when exposing the port, can be "tcp", or "udp".'})})]})]})}var t=!0;function i(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},5312:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"volume",children:"volume"}),"\n",(0,o.jsx)(e.p,{children:"A volume type allows the specification of an attached volume."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"source",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The source volume to mount in the container, can be specified as a relative ",(0,o.jsx)(e.code,{children:"./"})," or absolute path ",(0,o.jsx)(e.code,{children:"/usr/local/bin"}),". Relative paths are relative to\nthe file declaring the container."]})}),(0,o.jsx)(r,{name:"destination",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The destination in the container to mount the volume to, must be an absolute path."})}),(0,o.jsxs)(r,{name:"type",type:"string",required:"false",value:"bind",children:[(0,o.jsx)(e.p,{children:"The type of the mount, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"bind: bind the source path to the destination path in the container"}),"\n",(0,o.jsx)(e.li,{children:"volume: source is a Docker volume"}),"\n",(0,o.jsx)(e.li,{children:"tmpfs: create a temporary filesystem"}),"\n"]})]}),(0,o.jsxs)(r,{name:"bind_propagation",type:"string",required:"false",value:"rprivate",children:[(0,o.jsx)(e.p,{children:"Configures bind propagation for Docker volume mounts, only applies to bind mounts, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"shared"}),"\n",(0,o.jsx)(e.li,{children:"slave"}),"\n",(0,o.jsx)(e.li,{children:"private"}),"\n",(0,o.jsx)(e.li,{children:"rslave"}),"\n",(0,o.jsx)(e.li,{children:"rprivate"}),"\n"]}),(0,o.jsxs)(e.p,{children:["For more information please see the Docker documentation ",(0,o.jsx)(e.a,{href:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation",children:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation"})]})]}),(0,o.jsx)(r,{name:"bind_propagation_non_recursive",type:"boolean",required:"false",value:"false",children:(0,o.jsxs)(e.p,{children:["Configures recursiveness of the bind mount. By default Docker mounts with the equivalent of ",(0,o.jsx)(e.code,{children:"mount --rbind"})," meaning that mounts below the the source directory are visible in the container.\nFor instance running ",(0,o.jsx)(e.code,{children:"docker run --rm --mount type=bind,src=/,target=/host,readonly busybox"})," will make ",(0,o.jsx)(e.code,{children:"/run"})," of the host available as ",(0,o.jsx)(e.code,{children:"/host/run"})," in the container -- and to make matters\neven worse it will be writable (since only the toplevel bind is set readonly, not the children). If ",(0,o.jsx)(e.code,{children:"bind_propagation_non_recursive"})," is set to ",(0,o.jsx)(e.code,{children:"true"})," then the container will only see an\nempty ",(0,o.jsx)(e.code,{children:"/host/run"}),", meaning the ",(0,o.jsx)(e.code,{children:"tmpfs"})," which is typically mounted to ",(0,o.jsx)(e.code,{children:"/run"})," on the host is not propagated into the container."]})})]})]})}var t=!0;function i(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=3926)}),_N_E=s.O()}]);