(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7400],{8812:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/exec",function(){return s(4362)}])},4362:function(n,e,s){"use strict";s.r(e),s.d(e,{__N_SSG:function(){return c}});var o=s(5893),a=s(1151),r=s(8691),t=s(7206),i=s(1575),l=s(5312);function p(n){let e=Object.assign({h1:"h1",p:"p",code:"code",h3:"h3",pre:"pre",h2:"h2",hr:"hr"},(0,a.ah)(),n.components),{Intro:s,Properties:p,Property:c}=e;return s||h("Intro",!0),p||h("Properties",!0),c||h("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{children:"Exec"}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"exec"})," resource allows the execution of arbitrary commands and scripts.\nDepending on the parameters specified, the commands are executed either on the\nlocal machine or inside of a container."]}),(0,o.jsxs)(e.p,{children:["When either the ",(0,o.jsx)(e.code,{children:"image"})," or ",(0,o.jsx)(e.code,{children:"target"})," fields are specified, the command is executed\ninside of a container. When neither of these fields are specified, the command is\nexecuted on the local machine."]})]}),"\n",(0,o.jsx)(e.h3,{children:"Local execution"}),"\n",(0,o.jsx)(e.p,{children:"When running on the local machine, the command runs in the local user space, and\nhas access to all the environment variables that the user executing jumppad run\nhas access too. Additional environment variables, and the working directory for\nthe command can be specified as part of the resource."}),"\n",(0,o.jsxs)(e.p,{children:["Log files for an exec running on the local machine are written to ",(0,o.jsx)(e.code,{children:"$HOME/.jumppad/logs/exec_[name].log"}),"\nand the rendered script can be found in the jumppad temp directory ",(0,o.jsx)(e.code,{children:"$HOME/.jumppad/tmp/exec[name].sh"}),"."]}),"\n",(0,o.jsx)(e.h3,{children:"Remote execution"}),"\n",(0,o.jsxs)(e.p,{children:["Execution can either be in a stand alone container or can target an existing\nand running container. When targeting an existing container, the ",(0,o.jsx)(e.code,{children:"target"})," field\nmust be specified. When running in a stand alone container, the ",(0,o.jsx)(e.code,{children:"image"})," block must\nbe specified."]}),"\n",(0,o.jsx)(e.h3,{children:"Setting outputs"}),"\n",(0,o.jsxs)(e.p,{children:["Output variables for the exec resource can be set by echoing a key value pair\nto the output file inside the script. An environment variable ",(0,o.jsx)(e.code,{children:"${EXEC_OUTPUT}"}),"\nis automatically added to the environment of the script and points to the output."]}),"\n",(0,o.jsxs)(e.p,{children:["Any outputs set in the script are automatically parsed into a map\nand are available via the ",(0,o.jsx)(e.code,{children:"output"})," parameter."]}),"\n",(0,o.jsx)(e.p,{children:"The following example demonstrates how to set an output variable in a script."}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "exec" "inline" {\n  script = <<-EOF\n  #!/bin/bash\n  ls -lha\n\n  echo "FOO=BAR" > ${EXEC_OUTPUT}\n  EOF\n}\n\noutput "foo" {\n  value = resource.exec.inline.output.FOO\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;inline&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span><span style="color: var(--shiki-color-text)">  ls -lha</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  echo &quot;FOO</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">BAR</span><span style="color: var(--shiki-token-string-expression)">&quot; &gt; </span><span style="color: var(--shiki-token-keyword)">${EXEC_OUTPUT}</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">  EOF</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-string-expression)">output &quot;</span><span style="color: var(--shiki-color-text)">foo</span><span style="color: var(--shiki-token-string-expression)">&quot; {</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">  value = resource.exec.inline.output.FOO</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(p,{children:[(0,o.jsxs)(c,{name:"script",type:"string",required:"true",value:"",children:[(0,o.jsx)(e.p,{children:"The script to execute."}),(0,o.jsx)(e.pre,{language:"hcl",code:'resource "exec" "inline" {\n  script = <<-EOF\n  #!/bin/bash\n  ls -lha\n  EOF\n}\n\nresource "exec" "file" {\n  script = file("script.sh")\n}\n\nresource "exec" "template" {\n  script = template_file("script.sh.tpl", {\n    foo = "bar"\n  })\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;inline&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span><span style="color: var(--shiki-color-text)">  ls -lha</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;file&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> file(</span><span style="color: var(--shiki-token-string-expression)">&quot;script.sh&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;template&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> template_file(</span><span style="color: var(--shiki-token-string-expression)">&quot;script.sh.tpl&quot;</span><span style="color: var(--shiki-color-text)">, {</span></span>\n<span><span style="color: var(--shiki-color-text)">    foo = &quot;bar&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  })</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(c,{name:"working_directory",type:"string",required:"optional",value:"",children:(0,o.jsx)(e.p,{children:"The working directory to execute the script in."})}),(0,o.jsx)(c,{name:"timeout",type:"string",required:"optional",value:"0s",children:(0,o.jsx)(e.p,{children:"The timeout for the script to execute as a duration e.g. 30s."})}),(0,o.jsxs)(c,{name:"environment",type:"map[string]string",required:"optional",value:"",children:[(0,o.jsx)(e.p,{children:"Environment variables to set for the script."}),(0,o.jsx)(e.pre,{language:"hcl",code:'resource "exec" "env" {\n  environment = {\n    FOO = "bar"\n  }\n\n  script = <<-EOF\n  #!/bin/bash\n  echo $${FOO}\n  EOF\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;env&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  environment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    FOO = &quot;bar&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span><span style="color: var(--shiki-color-text)">  echo $${FOO}</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"output",type:"map[string]string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(e.p,{children:"Map of output variables set by echoing key value pairs to the output file from the execs\nscript."}),(0,o.jsx)(e.pre,{language:"hcl",code:'resource "exec" "inline" {\n  script = <<-EOF\n  echo "FOO=BAR" > ${EXEC_OUTPUT}\n  EOF\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;inline&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  echo &quot;FOO</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">BAR</span><span style="color: var(--shiki-token-string-expression)">&quot; &gt; </span><span style="color: var(--shiki-token-keyword)">${EXEC_OUTPUT}</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">  EOF</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">}</span></span>\n<span></span>'})})]})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"The following properties are only valid for local execution."}),"\n",(0,o.jsxs)(p,{children:[(0,o.jsx)(c,{name:"daemon",type:"bool",required:"false",value:"false",children:(0,o.jsx)(e.p,{children:"The process will be run as a daemon if set to true."})}),(0,o.jsx)(c,{name:"pid",type:"int",readonly:!0,required:"false",value:"",children:(0,o.jsx)(e.p,{children:"This is the pid of the parent process."})})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"The following properties are only valid for remote execution in a target container."}),"\n",(0,o.jsx)(p,{children:(0,o.jsxs)(c,{name:"target",type:"ref",required:"false",value:"",children:[(0,o.jsxs)(e.p,{children:["A reference to a target ",(0,o.jsx)(e.code,{children:"container"})," resource to execute the script in."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'resource "container" "alpine" {\n  image {\n    name = "alpine"\n  }\n}\n\nresource "exec" "uname" {\n  target = resource.container.alpine\n\n  script = <<-EOF\n  #!/bin/bash\n  uname -a\n  EOF\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;alpine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;alpine&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;uname&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  target </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">alpine</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span><span style="color: var(--shiki-color-text)">  uname -a</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"The following properties are only valid for remote execution in a standalone container."}),"\n",(0,o.jsxs)(p,{children:[(0,o.jsx)(c,{name:"image",type:"#image",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"The image to use for the container."})}),(0,o.jsx)(c,{name:"network",type:"#network_attachment",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"The network to attach the container to."})}),(0,o.jsx)(c,{name:"volume",type:"#volume",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"The volumes to mount to the container."})}),(0,o.jsx)(c,{name:"run_as",type:"#user",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"The user to run the script as."})})]}),"\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(t.default,{}),"\n",(0,o.jsx)(l.default,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"run_as"}),"\n",(0,o.jsx)(e.p,{children:"User and Group configuration to be used when running a container, by default Docker runs commands in the container as root id 0."}),"\n",(0,o.jsxs)(p,{children:[(0,o.jsx)(c,{name:"user",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Linux user ID or user name to run the container as, this overrides the default user configured in the container image."})}),(0,o.jsx)(c,{name:"group",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Linux group ID or group name to run the container as, this overrides the default group configured in the container image."})})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "exec" "install" {\n  script = <<-EOF\n  #!/bin/sh\n  OS=$(uname -s | tr \'[:upper:]\' \'[:lower:]\')\n  ARCH=$(uname -m | tr \'[:upper:]\' \'[:lower:]\')\n\n  if [ ! -f /tmp/consul ]; then\n    curl -L -o /tmp/consul.zip \\\n      https://releases.hashicorp.com/consul/1.16.2/consul_1.16.2_$${OS}_$${ARCH}.zip\n    cd /tmp && unzip ./consul.zip\n  fi\n  EOF\n}\n\nresource "exec" "run" {\n  depends_on = ["resource.exec.install"]\n\n  script = <<-EOF\n  #!/bin/sh\n  /tmp/consul agent -dev\n  EOF\n\n  daemon = true\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;install&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#!/bin/sh</span></span>\n<span><span style="color: var(--shiki-color-text)">  OS</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">$(uname -s | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)</span></span>\n<span><span style="color: var(--shiki-color-text)">  ARCH</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">$(uname -m | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  if [ ! -f /tmp/consul ]; then</span></span>\n<span><span style="color: var(--shiki-color-text)">    curl -L -o /tmp/consul.zip \\</span></span>\n<span><span style="color: var(--shiki-color-text)">      https:</span><span style="color: var(--shiki-token-comment)">//releases.hashicorp.com/consul/1.16.2/consul_1.16.2_$${OS}_$${ARCH}.zip</span></span>\n<span><span style="color: var(--shiki-color-text)">    cd /tmp &amp;&amp; unzip ./consul.zip</span></span>\n<span><span style="color: var(--shiki-color-text)">  fi</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;run&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;resource.exec.install&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#!/bin/sh</span></span>\n<span><span style="color: var(--shiki-color-text)">  /tmp/consul agent -dev</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  daemon </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "container" "alpine" {\n  image {\n    name = "alpine"\n  }\n\n  command = ["tail", "-f", "/dev/null"]\n}\n\nresource "exec" "in_container" {\n  target = resource.container.alpine\n\n  script = <<-EOF\n  #/bin/sh\n  ls -las\n  EOF\n}\n\nresource "exec" "standalone" {\n  image {\n    name = "alpine"\n  }\n\n  script = <<-EOF\n  #/bin/sh\n  ls -las\n  EOF\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;alpine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;alpine&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;tail&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;-f&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;/dev/null&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;in_container&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  target </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">alpine</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#/bin/sh</span></span>\n<span><span style="color: var(--shiki-color-text)">  ls -las</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;exec&quot; &quot;standalone&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;alpine&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">#/bin/sh</span></span>\n<span><span style="color: var(--shiki-color-text)">  ls -las</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var c=!0;function h(n,e){throw Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(p,n)})):p(n)}},1575:function(n,e,s){"use strict";s.r(e),s.d(e,{__N_SSG:function(){return t}});var o=s(5893),a=s(1151);function r(n){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.ah)(),n.components),{Properties:s,Property:r}=e;return s||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"image",children:"image"}),"\n",(0,o.jsx)(e.p,{children:"Image defines a Docker image used when creating this container. An Image can be stored in a public or a private repository."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(r,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["Name of the image to use when creating the container, can either be the full canonical name or short name for Docker official images.\ne.g. ",(0,o.jsx)(e.code,{children:"consul:v1.6.1"})," or ",(0,o.jsx)(e.code,{children:"docker.io/consul:v1.6.1"}),"."]})}),(0,o.jsx)(r,{name:"username",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Username to use when connecting to a private image repository"})}),(0,o.jsxs)(r,{name:"password",type:"string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Password to use when connecting to a private image repository, for both username and password interpolated environment variables can be used\nin place of static values."}),(0,o.jsx)(e.pre,{language:"hcl",code:'image {\n  name = "myregistry.io/myimage:latest"\n  username = env("REGISTRY_USERNAME")\n  password = env("REGISTRY_PASSWORD")\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myregistry.io/myimage:latest&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  username </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_USERNAME&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">  password </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_PASSWORD&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})]})]})}var t=!0;function i(n,e){throw Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(r,n)})):r(n)}},8691:function(n,e,s){"use strict";s.r(e),s.d(e,{__N_SSG:function(){return t}});var o=s(5893),a=s(1151);function r(n){let e=Object.assign({h2:"h2",p:"p",code:"code",a:"a"},(0,a.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsxs)(e.p,{children:["In addition to the main properties, all resources have ",(0,o.jsx)(e.code,{children:"meta"})," properties, such\nas the ",(0,o.jsx)(e.code,{children:"id"})," of the resource. To see the list of these properties please see the\n",(0,o.jsx)(e.code,{children:"Meta Properties"})," section in the documentation ",(0,o.jsx)(e.a,{href:"/docs/resources/meta",children:"/docs/resources/meta"}),"."]})]})}var t=!0;e.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(r,n)})):r(n)}},7206:function(n,e,s){"use strict";s.r(e),s.d(e,{__N_SSG:function(){return t}});var o=s(5893),a=s(1151);function r(n){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.ah)(),n.components),{Properties:s,Property:r}=e;return s||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"network_attachment",children:"network_attachment"}),"\n",(0,o.jsx)(e.p,{children:"Network attachment defines a network to which the container is attached."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsxs)(r,{name:"id",type:"string",required:"true",value:"",children:[(0,o.jsxs)(e.p,{children:["ID of the network to attach the container to, specified in reference format. e.g. to attach to a network called ",(0,o.jsx)(e.code,{children:"cloud"})]}),(0,o.jsx)(e.pre,{language:"hcl",code:'network {\n  id = "network.cloud"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"ip_address",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Static IP address to assign container for the network, the ip address must be within range defined by the network subnet.\nIf this parameter is omitted an IP address will be automatically assigned."})}),(0,o.jsxs)(r,{name:"aliases",type:"[]string",required:"false",value:"",children:[(0,o.jsxs)(e.p,{children:["Aliases allow alternate names to specified for the container. Aliases can be used to reference a container across the network, the container\nwill respond to ping and other network resolution using the primary assigned name ",(0,o.jsx)(e.code,{children:"[name].container.shipyard.run"})," and the aliases."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'network {\n  name    = "network.cloud"\n  aliases = [\n    "alt1.container.local.jmpd.in", \n    "alt2.container.local.jmpd.in"\n  ]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  aliases </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt1.container.local.jmpd.in&quot;</span><span style="color: var(--shiki-color-text)">, </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt2.container.local.jmpd.in&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  ]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"Name will equal the name of the network as created by jumppad."})}),(0,o.jsx)(r,{name:"assigned_address",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"assigned_address will equal the assigned IP address for the network. This will equal\nip_address if set; otherwise, this is the automatically assigned ip_address."})})]})]})}var t=!0;function i(n,e){throw Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(r,n)})):r(n)}},5312:function(n,e,s){"use strict";s.r(e),s.d(e,{__N_SSG:function(){return t}});var o=s(5893),a=s(1151);function r(n){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a"},(0,a.ah)(),n.components),{Properties:s,Property:r}=e;return s||i("Properties",!0),r||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"volume",children:"volume"}),"\n",(0,o.jsx)(e.p,{children:"A volume type allows the specification of an attached volume."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(r,{name:"source",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The source volume to mount in the container, can be specified as a relative ",(0,o.jsx)(e.code,{children:"./"})," or absolute path ",(0,o.jsx)(e.code,{children:"/usr/local/bin"}),". Relative paths are relative to\nthe file declaring the container."]})}),(0,o.jsx)(r,{name:"destination",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The destination in the container to mount the volume to, must be an absolute path."})}),(0,o.jsxs)(r,{name:"type",type:"string",required:"false",value:"bind",children:[(0,o.jsx)(e.p,{children:"The type of the mount, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"bind: bind the source path to the destination path in the container"}),"\n",(0,o.jsx)(e.li,{children:"volume: source is a Docker volume"}),"\n",(0,o.jsx)(e.li,{children:"tmpfs: create a temporary filesystem"}),"\n"]})]}),(0,o.jsxs)(r,{name:"bind_propagation",type:"string",required:"false",value:"rprivate",children:[(0,o.jsx)(e.p,{children:"Configures bind propagation for Docker volume mounts, only applies to bind mounts, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"shared"}),"\n",(0,o.jsx)(e.li,{children:"slave"}),"\n",(0,o.jsx)(e.li,{children:"private"}),"\n",(0,o.jsx)(e.li,{children:"rslave"}),"\n",(0,o.jsx)(e.li,{children:"rprivate"}),"\n"]}),(0,o.jsxs)(e.p,{children:["For more information please see the Docker documentation ",(0,o.jsx)(e.a,{href:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation",children:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation"})]})]}),(0,o.jsx)(r,{name:"bind_propagation_non_recursive",type:"boolean",required:"false",value:"false",children:(0,o.jsxs)(e.p,{children:["Configures recursiveness of the bind mount. By default Docker mounts with the equivalent of ",(0,o.jsx)(e.code,{children:"mount --rbind"})," meaning that mounts below the the source directory are visible in the container.\nFor instance running ",(0,o.jsx)(e.code,{children:"docker run --rm --mount type=bind,src=/,target=/host,readonly busybox"})," will make ",(0,o.jsx)(e.code,{children:"/run"})," of the host available as ",(0,o.jsx)(e.code,{children:"/host/run"})," in the container -- and to make matters\neven worse it will be writable (since only the toplevel bind is set readonly, not the children). If ",(0,o.jsx)(e.code,{children:"bind_propagation_non_recursive"})," is set to ",(0,o.jsx)(e.code,{children:"true"})," then the container will only see an\nempty ",(0,o.jsx)(e.code,{children:"/host/run"}),", meaning the ",(0,o.jsx)(e.code,{children:"tmpfs"})," which is typically mounted to ",(0,o.jsx)(e.code,{children:"/run"})," on the host is not propagated into the container."]})}),(0,o.jsxs)(r,{name:"selinux_relabel",type:"string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Configures Selinux relabeling for the container (usually specified as :z or :Z) and can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"shared (Equivalent to :z)"}),"\n",(0,o.jsx)(e.li,{children:"private (Equivalent to :Z)"}),"\n"]})]})]})]})}var t=!0;function i(n,e){throw Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(r,n)})):r(n)}}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=8812)}),_N_E=n.O()}]);