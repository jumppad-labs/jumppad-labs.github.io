(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7409],{4489:function(s,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/ingress",function(){return n(6957)}])},6957:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return p}});var o=n(5893),r=n(1151),a=n(8691);function t(s){let e=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",hr:"hr",pre:"pre",strong:"strong",h3:"h3"},(0,r.ah)(),s.components),{Intro:n,Properties:t,Property:p}=e;return n||l("Intro",!0),t||l("Properties",!0),p||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{children:["Ingress ",(0,o.jsx)(e.code,{children:"ingress"})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"ingress"})," resource allows you to expose services in Kubernetes and Nomad\ntasks to the local machine."]}),(0,o.jsx)(e.p,{children:"It also allows you to expose applications that are running to the local machine\nto a Kubernetes or Nomad cluster."})]}),"\n",(0,o.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(p,{name:"port",type:"int",required:"true",value:"",children:[(0,o.jsx)(e.p,{children:"If the application to be exposed exists on the target then this is the\nport that will be opened on the local machine that will direct traffic\nto the remote service."}),(0,o.jsx)(e.p,{children:"If the application exists on the local machine then this is the port\nwhere the application is running."})]}),(0,o.jsx)(p,{name:"expose_local",type:"bool",required:"false",value:"false",children:(0,o.jsx)(e.p,{children:"If set to true a service running on the local machine will be exposed to\nthe target cluster. If false then a service running on the target cluster\nwill be exposed to the local machine."})}),(0,o.jsx)(p,{name:"target",type:"#traffic_target",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The target for the ingress."})}),(0,o.jsx)(p,{name:"ingress_id",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"The unique identifier for the created ingress."})}),(0,o.jsxs)(p,{name:"local_address",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(e.p,{children:"The full address where the exposed application can be reached from the\nlocal network."}),(0,o.jsx)(e.p,{children:"Generally this is the local ip address of the machine running Jumppad and the\nport where the application is exposed."})]}),(0,o.jsx)(p,{name:"remote_address",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"The address of the exposed service as it would be rechable from the target\ncluster. This is generally a kubernetes service reference and port or for Nomad\na rechable IP address and port."})})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"traffic_target",children:"traffic_target"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(p,{name:"resource",type:"remote cluster",required:"true",value:"",children:[(0,o.jsxs)(e.p,{children:["A reference to the ",(0,o.jsx)(e.code,{children:"nomad_cluster"})," or ",(0,o.jsx)(e.code,{children:"kubernetes_cluster"})," resource."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'resource "k8s_cluster" "dev" {\n}\n\nresource "ingress" "consul_http" {\n  port = 18500\n\n  target {\n    resource = resource.k8s_cluster.dev\n    port     = 8500\n\n    config = {\n      service   = "consul-consul-server"\n      namespace = "default"\n    }\n  }\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;k8s_cluster&quot; &quot;dev&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;consul_http&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">18500</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    resource </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span></span>\n<span><span style="color: var(--shiki-color-text)">    port     </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8500</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      service   = &quot;consul-consul-server&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      namespace = &quot;default&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(p,{name:"port",type:"int",required:"true",value:"",children:[(0,o.jsx)(e.p,{children:"The numerical reference for the target service port."}),(0,o.jsxs)(e.p,{children:["Either ",(0,o.jsx)(e.code,{children:"port"})," or ",(0,o.jsx)(e.code,{children:"named_port"})," must be specified."]})]}),(0,o.jsxs)(p,{name:"named_port",type:"string",required:"true",value:"",children:[(0,o.jsx)(e.p,{children:"The string reference for the target service port."}),(0,o.jsxs)(e.p,{children:["Either ",(0,o.jsx)(e.code,{children:"port"})," or ",(0,o.jsx)(e.code,{children:"named_port"})," must be specified."]})]}),(0,o.jsxs)(p,{name:"config",type:"map[string]string",required:"true",value:"",children:[(0,o.jsx)(e.p,{children:"The configuration parameters for the ingress, configuration parameters\ndiffer depending on the target type."}),(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Kubernetes target config"})}),(0,o.jsx)(e.pre,{language:"hcl",code:'  service   = "Kubernetes service name" \n  namespace = "Kubernetes namespace where the service is deployed"\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  service   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Kubernetes service name&quot;</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  namespace </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Kubernetes namespace where the service is deployed&quot;</span></span>\n<span></span>'})}),(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Nomad target config"})}),(0,o.jsx)(e.pre,{language:"hcl",code:'  job   = "Name of the Nomad job" \n  group = "Group in the job"\n  task  = "Name of the task in the group"\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  job   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Name of the Nomad job&quot;</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  group </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Group in the job&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  task  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Name of the task in the group&quot;</span></span>\n<span></span>'})})]})]}),"\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.h3,{children:"Nomad Remote Service"}),"\n",(0,o.jsxs)(e.p,{children:["Exposes the the ",(0,o.jsx)(e.code,{children:"http"})," port for the task ",(0,o.jsx)(e.code,{children:"fake_service"})," in the group ",(0,o.jsx)(e.code,{children:"fake_service"}),"\nin the job ",(0,o.jsx)(e.code,{children:"example_1"})," locally on port ",(0,o.jsx)(e.code,{children:"19090"})]}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "ingress" "fake_service_1" {\n  port = 19090\n\n  target {\n    resource   = resource.nomad_cluster.dev\n    named_port = "http"\n\n    config = {\n      job   = "example_1"\n      group = "fake_service"\n      task  = "fake_service"\n    }\n  }\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;fake_service_1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">19090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    resource   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span></span>\n<span><span style="color: var(--shiki-color-text)">    named_port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      job   = &quot;example_1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      group = &quot;fake_service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      task  = &quot;fake_service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(e.h3,{children:"Kubernets Remote Service"}),"\n",(0,o.jsxs)(e.p,{children:["Exposes the Kubernets port ",(0,o.jsx)(e.code,{children:"9090"})," for the Kubernetes service ",(0,o.jsx)(e.code,{children:"fake-service"}),"\nin the ",(0,o.jsx)(e.code,{children:"default"})," namespace locally on port ",(0,o.jsx)(e.code,{children:"19090"}),"."]}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "ingress" "fake_service_1" {\n  port = 19090\n\n  target {\n    resource = resource.k8s_cluster.k3s.id\n    port = 9090\n\n    config = {\n      service   = "fake-service"\n      namespace = "default"\n    }\n  }\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;fake_service_1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">19090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    resource </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      service   = &quot;fake-service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      namespace = &quot;default&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(e.h3,{children:"Kubernets Local Service"}),"\n",(0,o.jsxs)(e.p,{children:["Exposes the local port ",(0,o.jsx)(e.code,{children:"9090"})," used by the app container, as a the Kubernetes service ",(0,o.jsx)(e.code,{children:"fake-service"}),"\nin the ",(0,o.jsx)(e.code,{children:"jumppad"})," namespace on port ",(0,o.jsx)(e.code,{children:"80"}),"."]}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "container" "app" {\n  image {\n    name = variable.image\n  }\n\n  port {\n    local  = 9090\n    remote = 9090\n    host = 9090 \n  }\n}\n\nresource "ingress" "fake_service_1" {\n  port = 9090\n\n  target {\n    resource = resource.k8s_cluster.k3s\n    port = 80\n\n    config = {\n      service   = "fake-service"\n    }\n  }\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;app&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> variable</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">image</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    local  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span><span style="color: var(--shiki-color-text)">    remote </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span><span style="color: var(--shiki-color-text)">    host </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;fake_service_1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    resource </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span></span>\n<span><span style="color: var(--shiki-color-text)">    port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">80</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      service   = &quot;fake-service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var p=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(t,s)})):t(s)}},8691:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),r=n(1151);function a(s){let e=Object.assign({h2:"h2",p:"p",code:"code",a:"a"},(0,r.ah)(),s.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsxs)(e.p,{children:["In addition to the main properties, all resources have meta properties, such\nas the ",(0,o.jsx)(e.code,{children:"id"})," of the resource. To see the list of these properties please see the\n",(0,o.jsx)(e.code,{children:"Meta Properties"})," section in the documentation ",(0,o.jsx)(e.a,{href:"/docs/resources/meta",children:"/docs/resources/meta"}),"."]})]})}var t=!0;e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(a,s)})):a(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=4489)}),_N_E=s.O()}]);