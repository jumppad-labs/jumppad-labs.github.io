(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1599],{65:function(s,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/container/sidecar",function(){return n(4263)}])},4263:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return c}});var o=n(5893),a=n(1151),r=n(8691),t=n(1575),l=n(5312);function i(s){let e=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",pre:"pre",hr:"hr",h3:"h3",a:"a"},(0,a.ah)(),s.components),{Intro:n,Properties:i,Property:c}=e;return n||p("Intro",!0),i||p("Properties",!0),c||p("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{children:["Sidecar ",(0,o.jsx)(e.code,{children:"sidecar"})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(e.p,{children:["The Sidecar resource allows you to run associated processes for Containers.\nSidecar does not have its own network, a Sidecar resource shares the network\nwith the target container. For example, localhost in the sidecar is localhost\nin the ",(0,o.jsx)(e.code,{children:"container"}),"."]}),(0,o.jsx)(e.p,{children:"Sidecar resources are not routable in the same way as container resources are.\nYou can not map an ingress to a sidecar and a sidecar can not expose ports.\nTraffic which is destined for a process running in a sidecar must be sent\nto the target container."})]}),"\n",(0,o.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsxs)(c,{name:"target",type:"string",required:"true",value:"",children:[(0,o.jsx)(e.p,{children:"The id of a container to attach the sidecar to."}),(0,o.jsx)(e.pre,{language:"hcl",code:"  resource.container.mine.meta.id\n",children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  resource.container.mine.meta.id</span></span>\n<span></span>'})})]}),(0,o.jsx)(c,{name:"image",type:"#image",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"Image defines a Docker image to use when creating the container."})}),(0,o.jsx)(c,{name:"entrypoint",type:"[]string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Entrypoint for the container, if not set, Jumppad starts the container using the\nentrypoint defined in the Docker image."})}),(0,o.jsxs)(c,{name:"command",type:"[]string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Command allows you to specify a command to execute when starting a container.\nCommand is specified as an array of strings, each part of the command is a separate string."}),(0,o.jsx)(e.p,{children:"For example, to start a container and follow logs at /dev/null the following command could be used."}),(0,o.jsx)(e.pre,{language:"hcl",code:'command = [\n    "tail",\n    "-f",\n    "/dev/null"\n]\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;tail&quot;</span><span style="color: var(--shiki-color-text)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;-f&quot;</span><span style="color: var(--shiki-color-text)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;/dev/null&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"environment",type:"map[string]string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Allows you to set environment variables in the container."}),(0,o.jsx)(e.pre,{language:"hcl",code:'env {\n  PATH = "/user/local/bin"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">env</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  PATH </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/user/local/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"volume",type:"#volume",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A volume allows you to specify a local volume which is mounted to the container when it is created.\nThis stanza can be specified multiple times."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  volume {\n    source      = "./"\n    destination = "/files"\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    source      </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/files&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"port",type:"#port",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A port stanza allows you to expose container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(e.pre,{language:"hcl",code:"  port {\n    local = 80\n    host  = 8080\n  }\n",children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    local </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">80</span></span>\n<span><span style="color: var(--shiki-color-text)">    host  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8080</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"port_range",type:"#port_range",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A port_range stanza allows you to expose a range of container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(e.p,{children:"The following example would create 11 ports from 80 to 90 (inclusive) and expose them to the host machine."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  port {\n    range       = "80-90"\n    enable_host = true\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    range       </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;80-90&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    enable_host </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsx)(c,{name:"privileged",type:"bool",required:"false",value:"false",children:(0,o.jsx)(e.p,{children:"Should the container run in Docker privileged mode?"})}),(0,o.jsx)(c,{name:"max_restart_count",type:"int",required:"false",value:"0",children:(0,o.jsx)(e.p,{children:"The maximum number of times a container will be restarted when it exits with a status code other than 0"})}),(0,o.jsx)(c,{name:"resources",type:"#resources",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Define resource constraints for the container"})}),(0,o.jsxs)(c,{name:"health_check",type:"#health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Define a health check for the container, the resource will only be marked as successfully created when the health check passes."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  health_check {\n    timeout = "30s"\n    http {\n      address = "http://localhost:8500/v1/status/leader"\n      success_codes = [200]\n    }\n    \n    tcp {\n      address = "http://localhost:8500/v1/status/leader"\n    }\n    \n   exec {\n      script = <<-EOF\n        #!/bin/bash\n\n        curl "http://localhost:9090"\n      EOF\n    }\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;30s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1/status/leader&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">tcp</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1/status/leader&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">        curl &quot;http:</span><span style="color: var(--shiki-token-comment)">//localhost:9090&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"run_as",type:"#run_as",required:"false",value:"container defaults",children:[(0,o.jsx)(e.p,{children:"Allows the container to be run as a specific user or group."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  run_as {\n    user = "1000"\n    group = "nicj"\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">run_as</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    user </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;1000&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    group </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;nicj&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"build",type:"#build",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Build a container from the given file and context before running the container."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  build   {\n    file = "./Dockerfile"\n    context = "./src"\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">build</span><span style="color: var(--shiki-color-text)">   {</span></span>\n<span><span style="color: var(--shiki-color-text)">    file </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./Dockerfile&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    context </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./src&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),(0,o.jsx)(e.p,{children:"Images are cached in the local Docker engine using the following convention."}),(0,o.jsx)(e.pre,{language:"shell",code:"  jumppad.dev/localcache/<resource_name>:latest\n",children:(0,o.jsx)(e.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">  jumppad.dev/localcache/</span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">resource_name</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">:latest</span></span>\n<span></span>'})}),(0,o.jsxs)(e.p,{children:["Once cached images are not rebuild with every ",(0,o.jsx)(e.code,{children:"run"})," to force the update of an image you can use the ",(0,o.jsx)(e.code,{children:"--force-update"})," flag with ",(0,o.jsx)(e.code,{children:"run"}),"."]}),(0,o.jsx)(e.pre,{language:"shell",code:"  jumppad up --force-update ./build\n",children:(0,o.jsx)(e.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">  jumppad up --force-update ./build</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"container_name",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(e.p,{children:["Fully qualified resource name for the container, this value can be used to\naccess the container from within the Docker network. ",(0,o.jsx)(e.code,{children:"container_name"})," is also the name\nof the created Docker container."]}),(0,o.jsx)(e.pre,{code:"  name.container.local.jmpd.in\n",children:(0,o.jsx)(e.code,{children:"  name.container.local.jmpd.in\n"})})]})]}),"\n",(0,o.jsx)(t.default,{}),"\n",(0,o.jsx)(l.default,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"health_check",children:"health_check"}),"\n",(0,o.jsxs)(e.p,{children:["A health_check stanza allows the definition of a health check which must pass before\nthe container is marked as successfully created. There are three different types\nof healthcheck ",(0,o.jsx)(e.code,{children:"http"}),", ",(0,o.jsx)(e.code,{children:"tcp"}),", and ",(0,o.jsx)(e.code,{children:"exec"}),", these are not mutually exclusive, it is\npossible to define more than one health check."]}),"\n",(0,o.jsxs)(e.p,{children:["Health checks are executed sequentially, if one health check fails, the following\nchecks are not executed. The execution order is ",(0,o.jsx)(e.code,{children:"http"}),", ",(0,o.jsx)(e.code,{children:"tcp"}),", `exec."]}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'  health_check {\n    timeout = "30s"\n    http {\n      address = "http://localhost:8500/v1/status/leader"\n      success_codes = [200]\n    }\n    \n    http {\n      address = "http://localhost:8500/v1"\n      success_codes = [200]\n    }\n    \n    tcp {\n      address = "localhost:8500"\n    }\n    \n   exec {\n      script = <<-EOF\n        #!/bin/bash\n\n        curl "http://localhost:9090"\n      EOF\n    }\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;30s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1/status/leader&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">tcp</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;localhost:8500&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">        curl &quot;http:</span><span style="color: var(--shiki-token-comment)">//localhost:9090&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(c,{name:"timeout",type:"duration",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The maximum duration to wait before marking the health check as failed. Expressed as a Go duration, e.g. ",(0,o.jsx)(e.code,{children:"1s"})," = 1 second, ",(0,o.jsx)(e.code,{children:"100ms"})," = 100 milliseconds."]})}),(0,o.jsxs)(c,{name:"http",type:"#http_health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"HTTP Health Check block defining the address to check and expected status codes."}),(0,o.jsx)(e.p,{children:"Can be specified more than once."})]}),(0,o.jsxs)(c,{name:"tcp",type:"#tpc_health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"TCP Health Check block defining the address to test."}),(0,o.jsx)(e.p,{children:"Can be specified more than once."})]}),(0,o.jsxs)(c,{name:"exec",type:"#exec_health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Exec Health Check block defining either a command to run in the current container,\nor a script to execute."}),(0,o.jsx)(e.p,{children:"Can be specified more than once."})]})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"http_health_check",children:"http_health_check"}),"\n",(0,o.jsxs)(e.p,{children:["A HTTP health check executes a HTTP GET request for the given address and evaluates\nthe response against the expected ",(0,o.jsx)(e.code,{children:"success_codes"}),". If the reponse matches any of\nthe given codes the check passes."]}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'http {\n  address = "http://localhost:8500/v1/status/leader"\n  method  = "GET"\n  body    = <<-EOF\n    {"test": "123"}\n  EOF\n  headers = {\n    "X-Auth-Token": ["abc123"]\n  }\n  success_codes = [200]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1/status/leader&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  method  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;GET&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  body    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    {&quot;test&quot;: &quot;123&quot;}</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  headers </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;X-Auth-Token&quot;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;abc123&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(c,{name:"address",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The URL to check, health check expects a HTTP status code to be returned by the URL in order to pass the health check."})}),(0,o.jsx)(c,{name:"method",type:"string",required:"false",value:"GET",children:(0,o.jsx)(e.p,{children:"HTTP method to use when executing the check"})}),(0,o.jsx)(c,{name:"body",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"HTTP body to send with the request"})}),(0,o.jsx)(c,{name:"body",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"HTTP body to send with the request"})}),(0,o.jsx)(c,{name:"headers",type:"map[string][string]",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"HTTP headers to send with the check"})}),(0,o.jsx)(c,{name:"success_codes",type:"[]number",required:"false",value:"200",children:(0,o.jsx)(e.p,{children:"HTTP status codes returned from the endpoint when called. If the returned status code matches any in the array then the health check will pass."})})]}),"\n",(0,o.jsx)(e.h2,{id:"tcp_health_check",children:"tcp_health_check"}),"\n",(0,o.jsx)(e.p,{children:"A TCP health check attempts to open a connection to the given address. If a\nconnection can be opened then the check passes."}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'tcp {\n  address = "localhost:8500"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">tcp</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;localhost:8500&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(i,{children:(0,o.jsx)(c,{name:"address",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The adress to check."})})}),"\n",(0,o.jsx)(e.h2,{id:"exec_health_check",children:"exec_health_check"}),"\n",(0,o.jsxs)(e.p,{children:["Exec health checks allow you to execute a command or script in the current container.\nIf the command or script receives an exit code ",(0,o.jsx)(e.code,{children:"0"})," the check passes."]}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsxs)(c,{name:"command",type:"[]string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A command to execute."}),(0,o.jsx)(e.pre,{language:"hcl",code:'exec {\n  command = ["pg_isready"]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;pg_isready&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(c,{name:"script",type:"string",required:"false",value:"",children:[(0,o.jsxs)(e.p,{children:["A script to execute in the target container, the script is coppied to the\ncontainer into the ",(0,o.jsx)(e.code,{children:"/tmp"})," directory and is then executed."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'exec {\n  script = <<-EOF\n    #!/bin/bash\n    \n    FILE=/etc/resolv.conf\n    if [ -f "$FILE" ]; then\n        echo "$FILE exists."\n    fi\n  EOF\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    FILE</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">/etc/resolv</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">conf</span></span>\n<span><span style="color: var(--shiki-color-text)">    if [ -f &quot;$FILE&quot; ]; then</span></span>\n<span><span style="color: var(--shiki-color-text)">        echo &quot;$FILE exists.&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    fi</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"resources",children:"resources"}),"\n",(0,o.jsx)(e.p,{children:"A resources type allows you to configure the maximum resources which can be consumed."}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(c,{name:"cpu",type:"int",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Set the maximum CPU which can be consumed by the container in MHz, 1 CPU == 1000MHz."})}),(0,o.jsxs)(c,{name:"cpu_pin",type:"[]int",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Pin the container CPU consumption to one or more logical CPUs. For example to pin the container to the core 1 and 4."}),(0,o.jsx)(e.pre,{code:"resources {\n  cpi_pin = [1,4]\n}\n",children:(0,o.jsx)(e.code,{children:"resources {\n  cpi_pin = [1,4]\n}\n"})})]}),(0,o.jsx)(c,{name:"memory",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Maximum  memory which a container can consume, specified in Megabytes."})}),(0,o.jsx)(c,{name:"gpu",type:"#gpu",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"GPU settings to pass through to container"})})]}),"\n",(0,o.jsx)(e.h3,{children:"gpu"}),"\n",(0,o.jsx)(e.p,{children:"GPU support allows you to pass through GPU devices to the container, this is useful for running GPU accelerated workloads."}),"\n",(0,o.jsxs)(e.p,{children:["For more information on GPU support in Docker see the ",(0,o.jsx)(e.a,{href:"https://docs.docker.com/desktop/gpu/",children:"official documentation"}),"."]}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(c,{name:"driver",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:'The GPU driver to use, i.e "nvidia", note: This has not been tested this with AMD or other GPUs.'})}),(0,o.jsx)(c,{name:"device_ids",type:"[]string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:'The GPUs to pass to the container, i.e "0", "1", "2".'})})]}),"\n",(0,o.jsx)(e.pre,{code:'  resources {\n    gpu {\n      driver = "nvidia"\n      device_ids = ["0", "1"]\n    }\n  }\n',children:(0,o.jsx)(e.code,{children:'  resources {\n    gpu {\n      driver = "nvidia"\n      device_ids = ["0", "1"]\n    }\n  }\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"run_as",children:"run_as"}),"\n",(0,o.jsx)(e.p,{children:"User and Group configuration to be used when running a container, by default Docker runs commands in the container as root id 0."}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)(c,{name:"user",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Linux user ID or user name to run the container as, this overrides the default user configured in the container image."})}),(0,o.jsx)(c,{name:"group",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Linux group ID or group name to run the container as, this overrides the default group configured in the container image."})})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsxs)(c,{name:"cluster",type:"string",required:"true",value:"",readonly:!0,children:[(0,o.jsx)(e.p,{children:"Text"}),(0,o.jsx)(e.pre,{language:"hcl",code:"code\n",children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">code</span></span>\n<span></span>'})})]}),(0,o.jsx)(c,{name:"cluster",type:"string",required:"true",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"Text"})})]}),"\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.h3,{children:"Container with Sidecar"}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "container" "consul" {\n  image {\n    name = "consul:${variable.consul_version}"\n  }\n\n  command = ["consul", "agent", "-config-file", "/config/config.hcl"]\n\n  volume {\n    source      = "./"\n    destination = "/files"\n  }\n\n  volume {\n    source      = resource.template.consul_config.destination\n    destination = "/config/config.hcl"\n  }\n\n  network {\n    id         = resource.network.onprem.meta.id\n    ip_address = "10.6.0.200" // optional\n    aliases    = ["myalias"]\n  }\n\n  environment = {\n    something       = variable.something\n    foo             = env("BAH")\n    file            = file("./conf.txt")\n    abc             = "123"\n    SHIPYARD_FOLDER = shipyard()\n    HOME_FOLDER     = home()\n  }\n  \n  port_range {\n    range       = "8500-8502"\n    enable_host = true\n  }\n\n}\n\nresource "sidecar" "envoy" {\n  target = resource.container.consul.meta.id\n\n  image {\n    name = "envoyproxy/envoy:v${variable.envoy_version}"\n  }\n\n  command = ["tail", "-f", "/dev/null"]\n\n  volume {\n    source      = data("config")\n    destination = "/config"\n  }\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;consul&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;consul:</span><span style="color: var(--shiki-token-keyword)">${variable</span><span style="color: var(--shiki-token-function)">.consul_version</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;agent&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;-config-file&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;/config/config.hcl&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    source      </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/files&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    source      </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">template</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">consul_config</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">destination</span></span>\n<span><span style="color: var(--shiki-color-text)">    destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/config/config.hcl&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id         </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">onprem</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">meta</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    ip_address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.6.0.200&quot;</span><span style="color: var(--shiki-color-text)"> // optional</span></span>\n<span><span style="color: var(--shiki-color-text)">    aliases    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;myalias&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  environment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    something       = variable.something</span></span>\n<span><span style="color: var(--shiki-color-text)">    foo             = env(&quot;BAH&quot;)</span></span>\n<span><span style="color: var(--shiki-color-text)">    file            = file(&quot;./conf.txt&quot;)</span></span>\n<span><span style="color: var(--shiki-color-text)">    abc             = &quot;123&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    SHIPYARD_FOLDER = shipyard()</span></span>\n<span><span style="color: var(--shiki-color-text)">    HOME_FOLDER     = home()</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">port_range</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    range       </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;8500-8502&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    enable_host </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;sidecar&quot; &quot;envoy&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  target </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">consul</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">meta</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;envoyproxy/envoy:v</span><span style="color: var(--shiki-token-keyword)">${variable</span><span style="color: var(--shiki-token-function)">.envoy_version</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;tail&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;-f&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;/dev/null&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    source      </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> data(</span><span style="color: var(--shiki-token-string-expression)">&quot;config&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">    destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/config&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var c=!0;function p(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(i,s)})):i(s)}},1575:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"image",children:"image"}),"\n",(0,o.jsx)(e.p,{children:"Image defines a Docker image used when creating this container. An Image can be stored in a public or a private repository."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["Name of the image to use when creating the container, can either be the full canonical name or short name for Docker official images.\ne.g. ",(0,o.jsx)(e.code,{children:"consul:v1.6.1"})," or ",(0,o.jsx)(e.code,{children:"docker.io/consul:v1.6.1"}),"."]})}),(0,o.jsx)(r,{name:"username",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Username to use when connecting to a private image repository"})}),(0,o.jsxs)(r,{name:"password",type:"string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Password to use when connecting to a private image repository, for both username and password interpolated environment variables can be used\nin place of static values."}),(0,o.jsx)(e.pre,{language:"hcl",code:'image {\n  name = "myregistry.io/myimage:latest"\n  username = env("REGISTRY_USERNAME")\n  password = env("REGISTRY_PASSWORD")\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myregistry.io/myimage:latest&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  username </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_USERNAME&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">  password </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_PASSWORD&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})]})]})}var t=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},8691:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({h2:"h2",p:"p",code:"code",a:"a"},(0,a.ah)(),s.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsxs)(e.p,{children:["In addition to the main properties, all resources have ",(0,o.jsx)(e.code,{children:"meta"})," properties, such\nas the ",(0,o.jsx)(e.code,{children:"id"})," of the resource. To see the list of these properties please see the\n",(0,o.jsx)(e.code,{children:"Meta Properties"})," section in the documentation ",(0,o.jsx)(e.a,{href:"/docs/resources/meta",children:"/docs/resources/meta"}),"."]})]})}var t=!0;e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},5312:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"volume",children:"volume"}),"\n",(0,o.jsx)(e.p,{children:"A volume type allows the specification of an attached volume."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"source",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The source volume to mount in the container, can be specified as a relative ",(0,o.jsx)(e.code,{children:"./"})," or absolute path ",(0,o.jsx)(e.code,{children:"/usr/local/bin"}),". Relative paths are relative to\nthe file declaring the container."]})}),(0,o.jsx)(r,{name:"destination",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The destination in the container to mount the volume to, must be an absolute path."})}),(0,o.jsxs)(r,{name:"type",type:"string",required:"false",value:"bind",children:[(0,o.jsx)(e.p,{children:"The type of the mount, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"bind: bind the source path to the destination path in the container"}),"\n",(0,o.jsx)(e.li,{children:"volume: source is a Docker volume"}),"\n",(0,o.jsx)(e.li,{children:"tmpfs: create a temporary filesystem"}),"\n"]})]}),(0,o.jsxs)(r,{name:"bind_propagation",type:"string",required:"false",value:"rprivate",children:[(0,o.jsx)(e.p,{children:"Configures bind propagation for Docker volume mounts, only applies to bind mounts, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"shared"}),"\n",(0,o.jsx)(e.li,{children:"slave"}),"\n",(0,o.jsx)(e.li,{children:"private"}),"\n",(0,o.jsx)(e.li,{children:"rslave"}),"\n",(0,o.jsx)(e.li,{children:"rprivate"}),"\n"]}),(0,o.jsxs)(e.p,{children:["For more information please see the Docker documentation ",(0,o.jsx)(e.a,{href:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation",children:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation"})]})]}),(0,o.jsx)(r,{name:"bind_propagation_non_recursive",type:"boolean",required:"false",value:"false",children:(0,o.jsxs)(e.p,{children:["Configures recursiveness of the bind mount. By default Docker mounts with the equivalent of ",(0,o.jsx)(e.code,{children:"mount --rbind"})," meaning that mounts below the the source directory are visible in the container.\nFor instance running ",(0,o.jsx)(e.code,{children:"docker run --rm --mount type=bind,src=/,target=/host,readonly busybox"})," will make ",(0,o.jsx)(e.code,{children:"/run"})," of the host available as ",(0,o.jsx)(e.code,{children:"/host/run"})," in the container -- and to make matters\neven worse it will be writable (since only the toplevel bind is set readonly, not the children). If ",(0,o.jsx)(e.code,{children:"bind_propagation_non_recursive"})," is set to ",(0,o.jsx)(e.code,{children:"true"})," then the container will only see an\nempty ",(0,o.jsx)(e.code,{children:"/host/run"}),", meaning the ",(0,o.jsx)(e.code,{children:"tmpfs"})," which is typically mounted to ",(0,o.jsx)(e.code,{children:"/run"})," on the host is not propagated into the container."]})}),(0,o.jsxs)(r,{name:"selinux_relabel",type:"string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Configures Selinux relabeling for the container (usually specified as :z or :Z) and can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"shared (Equivalent to :z)"}),"\n",(0,o.jsx)(e.li,{children:"private (Equivalent to :Z)"}),"\n"]})]})]})]})}var t=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=65)}),_N_E=s.O()}]);