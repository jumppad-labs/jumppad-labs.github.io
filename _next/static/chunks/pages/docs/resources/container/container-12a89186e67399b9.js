(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8560],{3090:function(s,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/container/container",function(){return n(6307)}])},6307:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return h}});var o=n(5893),a=n(1151),r=n(7206),t=n(1575),l=n(5312),i=n(6600),p=n(4699);function c(s){let e=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",pre:"pre",hr:"hr",h3:"h3"},(0,a.ah)(),s.components),{Intro:n,YouTube:c,Properties:h,Property:k}=e;return n||d("Intro",!0),h||d("Properties",!0),k||d("Property",!0),c||d("YouTube",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{children:["Container ",(0,o.jsx)(e.code,{children:"container"})]}),"\n",(0,o.jsx)(n,{children:(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"container"})," resource allows you to create Docker containers."]})}),"\n",(0,o.jsx)(c,{id:"X8xWzZD3ptM"}),"\n",(0,o.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(h,{children:[(0,o.jsx)(k,{name:"network",type:"#network_attachment",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"Network attaches the container to an existing network defined in a separate stanza.\nThis block can be specified multiple times to attach the container to multiple networks."})}),(0,o.jsx)(k,{name:"image",type:"#image",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"Image defines a Docker image to use when creating the container."})}),(0,o.jsx)(k,{name:"entrypoint",type:"[]string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Entrypoint for the container, if not set, Jumppad starts the container using the\nentrypoint defined in the Docker image."})}),(0,o.jsxs)(k,{name:"command",type:"[]string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Command allows you to specify a command to execute when starting a container.\nCommand is specified as an array of strings, each part of the command is a separate string."}),(0,o.jsx)(e.p,{children:"For example, to start a container and follow logs at /dev/null the following command could be used."}),(0,o.jsx)(e.pre,{language:"hcl",code:'command = [\n    "tail",\n    "-f",\n    "/dev/null"\n]\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;tail&quot;</span><span style="color: var(--shiki-color-text)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;-f&quot;</span><span style="color: var(--shiki-color-text)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;/dev/null&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"environment",type:"map[string]string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Allows you to set environment variables in the container."}),(0,o.jsx)(e.pre,{language:"hcl",code:'environment = {\n  PATH = "/user/local/bin"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">environment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  PATH = &quot;/user/local/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"volume",type:"#volume",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A volume allows you to specify a local volume which is mounted to the container when it is created.\nThis stanza can be specified multiple times."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  volume {\n    source      = "./"\n    destination = "/files"\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    source      </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/files&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"port",type:"#port",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A port stanza allows you to expose container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(e.pre,{language:"hcl",code:"  port {\n    local = 80\n    remote = 80\n    host  = 8080\n  }\n",children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    local </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">80</span></span>\n<span><span style="color: var(--shiki-color-text)">    remote </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">80</span></span>\n<span><span style="color: var(--shiki-color-text)">    host  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8080</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"port_range",type:"#port_range",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A port_range stanza allows you to expose a range of container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(e.p,{children:"The following example would create 11 ports from 80 to 90 (inclusive) and expose them to the host machine."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  port {\n    range       = "80-90"\n    enable_host = true\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    range       </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;80-90&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    enable_host </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsx)(k,{name:"privileged",type:"bool",required:"false",value:"false",children:(0,o.jsx)(e.p,{children:"Should the container run in Docker privileged mode?"})}),(0,o.jsx)(k,{name:"max_restart_count",type:"int",required:"false",value:"0",children:(0,o.jsx)(e.p,{children:"The maximum number of times a container will be restarted when it exits with a status code other than 0"})}),(0,o.jsx)(k,{name:"resources",type:"#resources",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Define resource constraints for the container"})}),(0,o.jsxs)(k,{name:"health_check",type:"#health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Define a health check for the container, the resource will only be marked as successfully created when the health check passes."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  health_check {\n    timeout = "30s"\n    http {\n      address = "http://localhost:8500/v1/status/leader"\n      success_codes = [200]\n    }\n    \n    tcp {\n      address = "localhost:8500"\n    }\n    \n   exec {\n      script = <<-EOF\n        #!/bin/bash\n\n        curl "http://localhost:9090"\n      EOF\n    }\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;30s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1/status/leader&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">tcp</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;localhost:8500&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">        curl &quot;http:</span><span style="color: var(--shiki-token-comment)">//localhost:9090&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"run_as",type:"#run_as",required:"false",value:"container defaults",children:[(0,o.jsx)(e.p,{children:"Allows the container to be run as a specific user or group."}),(0,o.jsx)(e.pre,{language:"hcl",code:'  run_as {\n    user = "1000"\n    group = "nicj"\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">run_as</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    user </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;1000&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    group </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;nicj&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"fqrn",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(e.p,{children:["Fully qualified resource name for the container, this value can be used to\naccess the container from within the Docker network. ",(0,o.jsx)(e.code,{children:"fqrn"})," is also the name\nof the created Docker container."]}),(0,o.jsx)(e.pre,{code:"  name.container.jumppad.dev\n",children:(0,o.jsx)(e.code,{children:"  name.container.jumppad.dev\n"})})]})]}),"\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(t.default,{}),"\n",(0,o.jsx)(l.default,{}),"\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(p.default,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"health_check"}),"\n",(0,o.jsxs)(e.p,{children:["A health_check stanza allows the definition of a health check which must pass before\nthe container is marked as successfully created. There are three different types\nof healthcheck ",(0,o.jsx)(e.code,{children:"http"}),", ",(0,o.jsx)(e.code,{children:"tcp"}),", and ",(0,o.jsx)(e.code,{children:"exec"}),", these are not mutually exclusive, it is\npossible to define more than one health check."]}),"\n",(0,o.jsxs)(e.p,{children:["Health checks are executed sequentially, if one health check fails, the following\nchecks are not executed. The execution order is ",(0,o.jsx)(e.code,{children:"http"}),", ",(0,o.jsx)(e.code,{children:"tcp"}),", `exec."]}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'  health_check {\n    timeout = "30s"\n    http {\n      address = "http://localhost:8500/v1/status/leader"\n      success_codes = [200]\n    }\n    \n    http {\n      address = "http://localhost:8500/v1"\n      success_codes = [200]\n    }\n    \n    tcp {\n      address = "localhost:8500"\n    }\n    \n   exec {\n      script = <<-EOF\n        #!/bin/bash\n\n        curl "http://localhost:9090"\n      EOF\n    }\n  }\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;30s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1/status/leader&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">tcp</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;localhost:8500&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">        curl &quot;http:</span><span style="color: var(--shiki-token-comment)">//localhost:9090&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(h,{children:[(0,o.jsx)(k,{name:"timeout",type:"duration",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The maximum duration to wait before marking the health check as failed. Expressed as a Go duration, e.g. ",(0,o.jsx)(e.code,{children:"1s"})," = 1 second, ",(0,o.jsx)(e.code,{children:"100ms"})," = 100 milliseconds."]})}),(0,o.jsxs)(k,{name:"http",type:"#http_health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"HTTP Health Check block defining the address to check and expected status codes."}),(0,o.jsx)(e.p,{children:"Can be specified more than once."})]}),(0,o.jsxs)(k,{name:"tcp",type:"#tpc_health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"TCP Health Check block defining the address to test."}),(0,o.jsx)(e.p,{children:"Can be specified more than once."})]}),(0,o.jsxs)(k,{name:"exec",type:"#exec_health_check",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Exec Health Check block defining either a command to run in the current container,\nor a script to execute."}),(0,o.jsx)(e.p,{children:"Can be specified more than once."})]})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"http_health_check"}),"\n",(0,o.jsxs)(e.p,{children:["A HTTP health check executes a HTTP GET request for the given address and evaluates\nthe response against the expected ",(0,o.jsx)(e.code,{children:"success_codes"}),". If the reponse matches any of\nthe given codes the check passes."]}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'http {\n  address = "http://localhost:8500/v1/status/leader"\n  method  = "GET"\n  body    = <<-EOF\n    {"test": "123"}\n  EOF\n  headers = {\n    "X-Auth-Token": ["abc123"]\n  }\n  success_codes = [200]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">http</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://localhost:8500/v1/status/leader&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  method  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;GET&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  body    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    {&quot;test&quot;: &quot;123&quot;}</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  headers </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;X-Auth-Token&quot;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;abc123&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  success_codes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(h,{children:[(0,o.jsx)(k,{name:"address",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The URL to check, health check expects a HTTP status code to be returned by the URL in order to pass the health check."})}),(0,o.jsx)(k,{name:"method",type:"string",required:"false",value:"GET",children:(0,o.jsx)(e.p,{children:"HTTP method to use when executing the check"})}),(0,o.jsx)(k,{name:"body",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"HTTP body to send with the request"})}),(0,o.jsx)(k,{name:"body",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"HTTP body to send with the request"})}),(0,o.jsx)(k,{name:"headers",type:"map[string][string]",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"HTTP headers to send with the check"})}),(0,o.jsx)(k,{name:"success_codes",type:"[]number",required:"false",value:"200",children:(0,o.jsx)(e.p,{children:"HTTP status codes returned from the endpoint when called. If the returned status code matches any in the array then the health check will pass."})})]}),"\n",(0,o.jsx)(e.h3,{children:"tcp_health_check"}),"\n",(0,o.jsx)(e.p,{children:"A TCP health check attempts to open a connection to the given address. If a\nconnection can be opened then the check passes."}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'tcp {\n  address = "localhost:8500"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">tcp</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;localhost:8500&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(h,{children:(0,o.jsx)(k,{name:"address",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The adress to check."})})}),"\n",(0,o.jsx)(e.h3,{children:"exec_health_check"}),"\n",(0,o.jsxs)(e.p,{children:["Exec health checks allow you to execute a command or script in the current container.\nIf the command or script receives an exit code ",(0,o.jsx)(e.code,{children:"0"})," the check passes."]}),"\n",(0,o.jsxs)(h,{children:[(0,o.jsxs)(k,{name:"command",type:"[]string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"A command to execute."}),(0,o.jsx)(e.pre,{language:"hcl",code:'exec {\n  command = ["pg_isready"]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;pg_isready&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"script",type:"string",required:"false",value:"",children:[(0,o.jsxs)(e.p,{children:["A script to execute in the target container, the script is coppied to the\ncontainer into the ",(0,o.jsx)(e.code,{children:"/tmp"})," directory and is then executed."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'exec {\n  script = <<-EOF\n    #!/bin/bash\n    \n    FILE=/etc/resolv.conf\n    if [ -f "$FILE" ]; then\n        echo "$FILE exists."\n    fi\n  EOF\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">exec</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">#!/bin/bash</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    FILE</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">/etc/resolv</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">conf</span></span>\n<span><span style="color: var(--shiki-color-text)">    if [ -f &quot;$FILE&quot; ]; then</span></span>\n<span><span style="color: var(--shiki-color-text)">        echo &quot;$FILE exists.&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    fi</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})]}),"\n",(0,o.jsx)(e.h3,{children:"resources"}),"\n",(0,o.jsx)(e.p,{children:"A resources type allows you to configure the maximum resources which can be consumed."}),"\n",(0,o.jsxs)(h,{children:[(0,o.jsx)(k,{name:"cpu",type:"int",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Set the maximum CPU which can be consumed by the container in MHz, 1 CPU == 1000MHz."})}),(0,o.jsxs)(k,{name:"cpu_pin",type:"[]number",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Pin the container CPU consumption to one or more logical CPUs. For example to pin the container to the core 1 and 4."}),(0,o.jsx)(e.pre,{code:"resources {\n  cpi_pin = [1,4]\n}\n",children:(0,o.jsx)(e.code,{children:"resources {\n  cpi_pin = [1,4]\n}\n"})})]}),(0,o.jsx)(k,{name:"memory",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Maximum  memory which a container can consume, specified in Megabytes."})})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"run_as"}),"\n",(0,o.jsx)(e.p,{children:"User and Group configuration to be used when running a container, by default Docker runs commands in the container as root id 0."}),"\n",(0,o.jsxs)(h,{children:[(0,o.jsx)(k,{name:"user",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Linux user ID or user name to run the container as, this overrides the default user configured in the container image."})}),(0,o.jsx)(k,{name:"group",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Linux group ID or group name to run the container as, this overrides the default group configured in the container image."})})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.h3,{children:"Minimal Example"}),"\n",(0,o.jsx)(e.p,{children:"The following example creates a container from an existing registry image."}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "container" "unique_name" {\n    network {\n        id         = resource.network.cloud.id\n        ip_address = "10.16.0.203"\n        aliases    = ["my_unique_name_ip_address"]\n    }\n\n    image {\n        name = "consul:1.6.1"\n    }\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;unique_name&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        id         </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">        ip_address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.16.0.203&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">        aliases    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;my_unique_name_ip_address&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;consul:1.6.1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(e.h3,{children:"Full Example"}),"\n",(0,o.jsx)(e.pre,{language:"hcl",code:'resource "container" "unique_name" {\n    depends_on = ["resource.container.another"]\n\n    network {\n        id         = resource.network.cloud.id\n        ip_address = "10.16.0.200"\n        aliases    = ["my_unique_name_ip_address"]\n    }\n\n    image {\n        name     = "consul:1.6.1"\n        username = "repo_username"\n        password = "repo_password"\n    }\n\n    command = [\n        "consul",\n        "agent"\n    ]\n\n    environment = {\n        CONSUL_HTTP_ADDR = "http://localhost:8500"\n    }\n\n    volume {\n        source      = "./config"\n        destination = "/config"\n    }\n\n    port {\n        local  = 8500\n        remote = 8500\n        host   = 18500\n    }\n    \n    port_range {\n        range       = "9000-9002"\n        enable_host = true\n    }\n\n    privileged = false\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;unique_name&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;resource.container.another&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        id         </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">        ip_address </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.16.0.200&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">        aliases    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;my_unique_name_ip_address&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        name     </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;consul:1.6.1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">        username </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;repo_username&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">        password </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;repo_password&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span><span style="color: var(--shiki-color-text)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&quot;agent&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    ]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    environment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        CONSUL_HTTP_ADDR = &quot;http://localhost:8500&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        source      </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./config&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">        destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/config&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        local  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8500</span></span>\n<span><span style="color: var(--shiki-color-text)">        remote </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8500</span></span>\n<span><span style="color: var(--shiki-color-text)">        host   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">18500</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">port_range</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">        range       </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;9000-9002&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">        enable_host </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    privileged </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var h=!0;function d(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(c,s)})):c(s)}},1575:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"image",children:"image"}),"\n",(0,o.jsx)(e.p,{children:"Image defines a Docker image used when creating this container. An Image can be stored in a public or a private repository."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["Name of the image to use when creating the container, can either be the full canonical name or short name for Docker official images.\ne.g. ",(0,o.jsx)(e.code,{children:"consul:v1.6.1"})," or ",(0,o.jsx)(e.code,{children:"docker.io/consul:v1.6.1"}),"."]})}),(0,o.jsx)(r,{name:"username",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Username to use when connecting to a private image repository"})}),(0,o.jsxs)(r,{name:"password",type:"string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Password to use when connecting to a private image repository, for both username and password interpolated environment variables can be used\nin place of static values."}),(0,o.jsx)(e.pre,{language:"hcl",code:'image {\n  name = "myregistry.io/myimage:latest"\n  username = env("REGISTRY_USERNAME")\n  password = env("REGISTRY_PASSWORD")\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myregistry.io/myimage:latest&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  username </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_USERNAME&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">  password </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_PASSWORD&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})]})]})}var t=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},7206:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"network_attachment",children:"network_attachment"}),"\n",(0,o.jsx)(e.p,{children:"Network attachment defines a network to which the container is attached."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(r,{name:"id",type:"string",required:"true",value:"",children:[(0,o.jsxs)(e.p,{children:["ID of the network to attach the container to, specified in reference format. e.g. to attach to a network called ",(0,o.jsx)(e.code,{children:"cloud"})]}),(0,o.jsx)(e.pre,{language:"hcl",code:'network {\n  id = "network.cloud"\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"ip_address",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:"Static IP address to assign container for the network, the ip address must be within range defined by the network subnet.\nIf this parameter is omitted an IP address will be automatically assigned."})}),(0,o.jsxs)(r,{name:"aliases",type:"[]string",required:"false",value:"",children:[(0,o.jsxs)(e.p,{children:["Aliases allow alternate names to specified for the container. Aliases can be used to reference a container across the network, the container\nwill respond to ping and other network resolution using the primary assigned name ",(0,o.jsx)(e.code,{children:"[name].container.shipyard.run"})," and the aliases."]}),(0,o.jsx)(e.pre,{language:"hcl",code:'network {\n  name    = "network.cloud"\n  aliases = [\n    "alt1.container.jumppad.dev", \n    "alt2.container.jumppad.dev"\n  ]\n}\n',children:(0,o.jsx)(e.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  aliases </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt1.container.jumppad.dev&quot;</span><span style="color: var(--shiki-color-text)">, </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt2.container.jumppad.dev&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  ]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"Name will equal the name of the network as created by jumppad."})}),(0,o.jsx)(r,{name:"assigned_address",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(e.p,{children:"assigned_address will equal the assigned IP address for the network. This will equal\nip_address if set; otherwise, this is the automatically assigned ip_address."})})]})]})}var t=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},6600:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"port",children:"port"}),"\n",(0,o.jsx)(e.p,{children:"A port stanza defines host to container communications"}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"local",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The local port in the container."})}),(0,o.jsx)(r,{name:"host",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The host port to map the local port to."})}),(0,o.jsx)(r,{name:"protocol",type:"string",required:"false",value:"",children:(0,o.jsx)(e.p,{children:'The protocol to use when exposing the port, can be "tcp", or "udp".'})}),(0,o.jsx)(r,{name:"open_in_browser",type:"string",required:"false",value:"/",children:(0,o.jsx)(e.p,{children:"Should a browser window be automatically opened when this resource is created. Browser windows will open at the path specified by this property."})})]})]})}var t=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},4699:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"port_range",children:"port_range"}),"\n",(0,o.jsx)(e.p,{children:"A port_range stanza defines host to container communications by exposing a range of ports for the container."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"range",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The port range to expose, e.g, ",(0,o.jsx)(e.code,{children:"8080-8082"})," would expose the ports ",(0,o.jsx)(e.code,{children:"8080"}),", ",(0,o.jsx)(e.code,{children:"8081"}),", ",(0,o.jsx)(e.code,{children:"8082"}),"."]})}),(0,o.jsx)(r,{name:"enable_host",type:"bool",required:"false",value:"false",children:(0,o.jsx)(e.p,{children:"The host port to map the local port to."})}),(0,o.jsx)(r,{name:"protocol",type:"string",required:"false",value:"tcp",children:(0,o.jsx)(e.p,{children:'The protocol to use when exposing the port, can be "tcp", or "udp".'})})]})]})}var t=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}},5312:function(s,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(s){let e=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a"},(0,a.ah)(),s.components),{Properties:n,Property:r}=e;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"volume",children:"volume"}),"\n",(0,o.jsx)(e.p,{children:"A volume type allows the specification of an attached volume."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)(r,{name:"source",type:"string",required:"true",value:"",children:(0,o.jsxs)(e.p,{children:["The source volume to mount in the container, can be specified as a relative ",(0,o.jsx)(e.code,{children:"./"})," or absolute path ",(0,o.jsx)(e.code,{children:"/usr/local/bin"}),". Relative paths are relative to\nthe file declaring the container."]})}),(0,o.jsx)(r,{name:"destination",type:"string",required:"true",value:"",children:(0,o.jsx)(e.p,{children:"The destination in the container to mount the volume to, must be an absolute path."})}),(0,o.jsxs)(r,{name:"type",type:"string",required:"false",value:"bind",children:[(0,o.jsx)(e.p,{children:"The type of the mount, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"bind: bind the source path to the destination path in the container"}),"\n",(0,o.jsx)(e.li,{children:"volume: source is a Docker volume"}),"\n",(0,o.jsx)(e.li,{children:"tmpfs: create a temporary filesystem"}),"\n"]})]}),(0,o.jsxs)(r,{name:"bind_propagation",type:"string",required:"false",value:"rprivate",children:[(0,o.jsx)(e.p,{children:"Configures bind propagation for Docker volume mounts, only applies to bind mounts, can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"shared"}),"\n",(0,o.jsx)(e.li,{children:"slave"}),"\n",(0,o.jsx)(e.li,{children:"private"}),"\n",(0,o.jsx)(e.li,{children:"rslave"}),"\n",(0,o.jsx)(e.li,{children:"rprivate"}),"\n"]}),(0,o.jsxs)(e.p,{children:["For more information please see the Docker documentation ",(0,o.jsx)(e.a,{href:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation",children:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation"})]})]}),(0,o.jsx)(r,{name:"bind_propagation_non_recursive",type:"boolean",required:"false",value:"false",children:(0,o.jsxs)(e.p,{children:["Configures recursiveness of the bind mount. By default Docker mounts with the equivalent of ",(0,o.jsx)(e.code,{children:"mount --rbind"})," meaning that mounts below the the source directory are visible in the container.\nFor instance running ",(0,o.jsx)(e.code,{children:"docker run --rm --mount type=bind,src=/,target=/host,readonly busybox"})," will make ",(0,o.jsx)(e.code,{children:"/run"})," of the host available as ",(0,o.jsx)(e.code,{children:"/host/run"})," in the container -- and to make matters\neven worse it will be writable (since only the toplevel bind is set readonly, not the children). If ",(0,o.jsx)(e.code,{children:"bind_propagation_non_recursive"})," is set to ",(0,o.jsx)(e.code,{children:"true"})," then the container will only see an\nempty ",(0,o.jsx)(e.code,{children:"/host/run"}),", meaning the ",(0,o.jsx)(e.code,{children:"tmpfs"})," which is typically mounted to ",(0,o.jsx)(e.code,{children:"/run"})," on the host is not propagated into the container."]})}),(0,o.jsxs)(r,{name:"selinux_relabel",type:"string",required:"false",value:"",children:[(0,o.jsx)(e.p,{children:"Configures Selinux relabeling for the container (usually specified as :z or :Z) and can be one of the following values:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"shared (Equivalent to :z)"}),"\n",(0,o.jsx)(e.li,{children:"private (Equivalent to :Z)"}),"\n"]})]})]})]})}var t=!0;function l(s,e){throw Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),s.components);return e?(0,o.jsx)(e,Object.assign({},s,{children:(0,o.jsx)(r,s)})):r(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=3090)}),_N_E=s.O()}]);