(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3522],{8183:function(s,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/cli/test",function(){return o(8835)}])},8835:function(s,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return r}});var a=o(5893),t=o(1151);function e(s){let n=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",h3:"h3",h4:"h4"},(0,t.ah)(),s.components),{Intro:o,Properties:e,Property:r}=n;return o||i("Intro",!0),e||i("Properties",!0),r||i("Property",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"Test"}),"\n",(0,a.jsxs)(o,{children:[(0,a.jsxs)(n.p,{children:["Run functional tests for the blueprint, this command will start the jumppad blueprint specified by the location ",(0,a.jsx)(n.code,{children:"blueprint"})," and run any functional tests specified in the ",(0,a.jsx)(n.code,{children:"test"})," subdirectory."]}),(0,a.jsxs)(n.p,{children:["For more information, take a look at the ",(0,a.jsx)(n.a,{href:"/docs/tutorials/testing",children:"Testing Tutorial"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{language:"shell",code:"jumppad test <blueprint>\n",children:(0,a.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">jumppad </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">blueprint</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h2,{id:"flags",children:"Flags"}),"\n",(0,a.jsxs)(e,{children:[(0,a.jsx)(r,{name:"force-update",children:(0,a.jsx)(n.p,{children:"When set to true jumppad will ignore cached images or files and will download all resources."})}),(0,a.jsx)(r,{name:"purge",children:(0,a.jsx)(n.p,{children:"When set to true jumppad will remove any cached images or blueprints."})}),(0,a.jsx)(r,{name:"test-folder",type:"string",required:"false",value:"",children:(0,a.jsx)(n.p,{children:"Specify the folder containing the functional tests."})}),(0,a.jsx)(r,{name:"tags",type:"string",required:"false",value:"",children:(0,a.jsx)(n.p,{children:"Test tags to run e.g. @wip, @wip,@new, when not set all tests are run."})}),(0,a.jsx)(r,{name:"var",type:"string",required:"false",value:"",children:(0,a.jsx)(n.p,{children:"Allows setting variables from the command line, variables are specified as a key and value, e.g --var key=value. Can be specified multiple times."})}),(0,a.jsx)(r,{name:"vars-file",type:"string",required:"false",value:"",children:(0,a.jsx)(n.p,{children:"Load variables from a location other than *.vars files in the blueprint folder. E.g --vars-file=./file.vars."})})]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(n.p,{children:["The following example shows a test which would start a blueprint, and assert that the defined resources are created and running, as well as applications defined by the blueprint are accessible and functioning correctly by checking the HTTP response. For more information on the statements please see the ",(0,a.jsx)(n.a,{href:"#testing-statements",children:"Testing Statements"})," section below."]}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Feature: Docker Container\n  In order to test jumppad creates containers correctly\n  I should apply a blueprint which defines a simple container setup\n  and test the resources are created correctly\nScenario: Single Container from Local Blueprint\n  Given the following environment variables are set\n    | key            | value                 |\n    | CONSUL_VERSION | 1.8.0                 |\n    | ENVOY_VERSION  | 1.14.3                |\n  And I have a running blueprint\n  Then the following resources should be running\n    | name                      | type      |\n    | onprem                    | network   |\n    | consul                    | container |\n    | envoy                     | sidecar   |\n    | consul-container-http     | ingress   |\n  And a HTTP call to "http://consul.container.local.jmpd.in:8500/v1/status/leader" should result in status 200\n  And a HTTP call to "http://consul-http.ingress.local.jmpd.in:28500/v1/status/leader" should result in status 200\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Feature</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Docker Container</span></span>\n<span><span style="color: var(--shiki-color-text)">  In order to test jumppad creates containers correctly</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> should apply a blueprint which defines a simple container setup</span></span>\n<span><span style="color: var(--shiki-color-text)">  and test the resources are created correctly</span></span>\n<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given the following environment variables are set</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> key            </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> value                 </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CONSUL_VERSION</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.8</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">                 </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ENVOY_VERSION</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.14</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">  And </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then the following resources should be running</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> name                      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> type      </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> onprem                    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> network   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul                    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> container </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> envoy                     </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> sidecar   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">http     </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> ingress   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">  And a </span><span style="color: var(--shiki-token-constant)">HTTP</span><span style="color: var(--shiki-color-text)"> call to </span><span style="color: var(--shiki-token-string-expression)">&quot;http://consul.container.local.jmpd.in:8500/v1/status/leader&quot;</span><span style="color: var(--shiki-color-text)"> should result </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> status </span><span style="color: var(--shiki-token-constant)">200</span></span>\n<span><span style="color: var(--shiki-color-text)">  And a </span><span style="color: var(--shiki-token-constant)">HTTP</span><span style="color: var(--shiki-color-text)"> call to </span><span style="color: var(--shiki-token-string-expression)">&quot;http://consul-http.ingress.local.jmpd.in:28500/v1/status/leader&quot;</span><span style="color: var(--shiki-color-text)"> should result </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> status </span><span style="color: var(--shiki-token-constant)">200</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h3,{children:"Running Tests"}),"\n",(0,a.jsxs)(n.p,{children:["The following example would test the blueprint in the folder ",(0,a.jsx)(n.code,{children:"./examples/container"}),", functional tests are expressed using the ",(0,a.jsx)(n.code,{children:"Gherkin"})," syntax and stored in the folder ",(0,a.jsx)(n.code,{children:"./examples/container/test"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"--purge"})," flag will remove all downloaded images, Helm charts, or external blueprints after running the tests. This is to ensure that each scenario has no cached dependencies from a previous test."]}),"\n",(0,a.jsx)(n.pre,{language:"shell",code:'jumppad test --purge ./examples/container \nFeature: Docker Container\n  In order to test jumppad creates containers correctly\n  I should apply a blueprint which defines a simple container setup\n  and test the resources are created correctly\n  Scenario: Single Container from Local Blueprint                                                                   # examples/container/test/container.feature:6\n    Given the following environment variables are set                                                               # test.go:309 -> *CucumberRunner\n      | key            | value  |\n      | CONSUL_VERSION | 1.8.0  |\n      | ENVOY_VERSION  | 1.14.3 |\n    And I have a running blueprint                                                                                  # test.go:141 -> *CucumberRunner\n    Then the following resources should be running                                                                  # test.go:189 -> *CucumberRunner\n      | name                  | type      |\n      | onprem                | network   |\n      | consul                | container |\n      | envoy                 | sidecar   |\n      | consul-container-http | ingress   |\n    And a HTTP call to "http://consul.container.local.jmpd.in:8500/v1/status/leader" should result in status 200     # test.go:277 -> *CucumberRunner\n    And a HTTP call to "http://consul-http.ingress.local.jmpd.in:28500/v1/status/leader" should result in status 200 # test.go:277 -> *CucumberRunner\n',children:(0,a.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">jumppad </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)"> --purge ./examples/container </span></span>\n<span><span style="color: var(--shiki-color-text)">Feature: Docker Container</span></span>\n<span><span style="color: var(--shiki-color-text)">  In order to </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)"> jumppad creates containers correctly</span></span>\n<span><span style="color: var(--shiki-color-text)">  I should apply a blueprint which defines a simple container setup</span></span>\n<span><span style="color: var(--shiki-color-text)">  and </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)"> the resources are created correctly</span></span>\n<span><span style="color: var(--shiki-color-text)">  Scenario: Single Container from Local Blueprint                                                                   </span><span style="color: var(--shiki-token-comment)"># examples/container/test/container.feature:6</span></span>\n<span><span style="color: var(--shiki-color-text)">    Given the following environment variables are </span><span style="color: var(--shiki-token-function)">set</span><span style="color: var(--shiki-color-text)">                                                               </span><span style="color: var(--shiki-token-comment)"># test.go:309 -&gt; *CucumberRunner</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> key            </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> value  </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> CONSUL_VERSION </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> 1.8.0  </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> ENVOY_VERSION  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> 1.14.3 </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    And I have a running blueprint                                                                                  </span><span style="color: var(--shiki-token-comment)"># test.go:141 -&gt; *CucumberRunner</span></span>\n<span><span style="color: var(--shiki-color-text)">    Then the following resources should be running                                                                  </span><span style="color: var(--shiki-token-comment)"># test.go:189 -&gt; *CucumberRunner</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> name                  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> onprem                </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> network   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul                </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> container </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> envoy                 </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> sidecar   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul-container-http </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> ingress   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    And a HTTP call to </span><span style="color: var(--shiki-token-string-expression)">&quot;http://consul.container.local.jmpd.in:8500/v1/status/leader&quot;</span><span style="color: var(--shiki-color-text)"> should result </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> status 200     </span><span style="color: var(--shiki-token-comment)"># test.go:277 -&gt; *CucumberRunner</span></span>\n<span><span style="color: var(--shiki-color-text)">    And a HTTP call to </span><span style="color: var(--shiki-token-string-expression)">&quot;http://consul-http.ingress.local.jmpd.in:28500/v1/status/leader&quot;</span><span style="color: var(--shiki-color-text)"> should result </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> status 200 </span><span style="color: var(--shiki-token-comment)"># test.go:277 -&gt; *CucumberRunner</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h2,{id:"testing_statements",children:"Testing Statements"}),"\n",(0,a.jsx)(n.p,{children:"When writing features the following statements can be used:"}),"\n",(0,a.jsx)(n.h3,{children:"Setup"}),"\n",(0,a.jsx)(n.h4,{children:"I have a running blueprint"}),"\n",(0,a.jsxs)(n.p,{children:["The statement ",(0,a.jsx)(n.code,{children:"I have a running blueprint"})," creates the resources in the blueprint."]}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:"Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n",children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["I have a running blueprint using version ",(0,a.jsx)(n.code,{children:'"<version>"'})]}),"\n",(0,a.jsx)(n.p,{children:"This statement starts a blueprint using a specific version of jumppad."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint using version "0.1.2"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint using version </span><span style="color: var(--shiki-token-string-expression)">&quot;0.1.2&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["I have a running blueprint at path ",(0,a.jsx)(n.code,{children:'"<path>"'})]}),"\n",(0,a.jsx)(n.p,{children:"This statement allows you to run a blueprint at the given path, you can use this in combination with the\nmain blueprint for the tests. This can be useful to setup test data, etc."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  And I have a running blueprint at path "./testsetup/container"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  And </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint at path </span><span style="color: var(--shiki-token-string-expression)">&quot;./testsetup/container&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["I have a running blueprint at path ",(0,a.jsx)(n.code,{children:'"<path>"'})," using version ",(0,a.jsx)(n.code,{children:'"<version>"'})]}),"\n",(0,a.jsxs)(n.p,{children:["Starts a blueprint at the given path using a specific jumppad version. You can use ",(0,a.jsx)(n.a,{href:"#matrix-testing",children:"Matrix testing"})," with these statements\nto test your blueprints with different jumppad versions."]}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint at path "./testsetup/container" using version "<version>"\n  Examples:\n    | consul            | envoy    |\n    | 1.8.0             | 1.14.3   |\n    | 1.7.3             | 1.14.3   |\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint at path </span><span style="color: var(--shiki-token-string-expression)">&quot;./testsetup/container&quot;</span><span style="color: var(--shiki-color-text)"> using version </span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;version&gt;&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  Examples</span><span style="color: var(--shiki-token-punctuation)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul            </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> envoy    </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.8</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">             </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.14</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.7</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">             </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.14</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["the environment variable ",(0,a.jsx)(n.code,{children:'"<key>"'})," has a value ",(0,a.jsx)(n.code,{children:'"<value>"'})]}),"\n",(0,a.jsx)(n.p,{children:"This statement allows you to set environment variables for your blueprints before executing the tests."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given the environment variable "CONSUL_VERSION" has a value "1.8.0"\n  And I have a running blueprint\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given the environment variable </span><span style="color: var(--shiki-token-string-expression)">&quot;CONSUL_VERSION&quot;</span><span style="color: var(--shiki-color-text)"> has a value </span><span style="color: var(--shiki-token-string-expression)">&quot;1.8.0&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  And </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.p,{children:"Environment variables can be interpolated inside of your blueprints and allow you to create dynamic code. For example the following allows you to set the version of a Docker container using an environment variable."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'container "consul" {\n  image   {\n    name = "consul:${env("CONSUL_VERSION")}"\n  }\n}\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">container </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  image   {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;consul:${env(&quot;</span><span style="color: var(--shiki-token-constant)">CONSUL_VERSION</span><span style="color: var(--shiki-token-string-expression)">&quot;)}&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.p,{children:"When you run your tests the environment variable will be set and interpolated before the blueprint is created."}),"\n",(0,a.jsx)(n.h3,{children:"The following environment variables are set"}),"\n",(0,a.jsx)(n.p,{children:"This statement is similar to the previous except you can define the list of environment variables using a table."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:"Scenario: Single Container from Local Blueprint\n  Given the following environment variables are set\n    | key            | value                 |\n    | CONSUL_VERSION | 1.8.0                 |\n    | ENVOY_VERSION  | 1.14.3                |\n  And I have a running blueprint\n",children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given the following environment variables are set</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> key            </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> value                 </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CONSUL_VERSION</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.8</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">                 </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ENVOY_VERSION</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.14</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">  And </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h4,{children:"the following jumppad variables are set"}),"\n",(0,a.jsx)(n.p,{children:"This statement allows you to set the value for any jumppad variables which may be used by the blueprint"}),"\n",(0,a.jsx)(n.pre,{code:"Scenario: Single Container from Local Blueprint\n  Given the following jumppad variables are set\n    | key            | value                 |\n    | consul_version | 1.8.0                 |\n    | envoy_version  | 1.14.3                |\n  And I have a running blueprint\n",children:(0,a.jsx)(n.code,{children:"Scenario: Single Container from Local Blueprint\n  Given the following jumppad variables are set\n    | key            | value                 |\n    | consul_version | 1.8.0                 |\n    | envoy_version  | 1.14.3                |\n  And I have a running blueprint\n"})}),"\n",(0,a.jsx)(n.p,{children:"When you run your tests the environment varaible will be set and interpolated before the blueprint is created."}),"\n",(0,a.jsx)(n.h3,{children:"Assertion"}),"\n",(0,a.jsxs)(n.h4,{children:["there should be a ",(0,a.jsx)(n.code,{children:'"<resource type>"'})," running called ",(0,a.jsx)(n.code,{children:'"<name>"'})]}),"\n",(0,a.jsx)(n.p,{children:"This statement allows you to write an assertion that a particular resources has been created. The first parameter is the type of the resource and the second the name."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h4,{children:"the following resources should be running"}),"\n",(0,a.jsxs)(n.p,{children:["This statement performs the same function as the previous but allows you top specify a table of resources. The table must start with a header row containing the columns ",(0,a.jsx)(n.code,{children:"name"})," and ",(0,a.jsx)(n.code,{children:"type"}),"."]}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:"Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then the following resources should be running\n    | name                      | type      |\n    | onprem                    | network   |\n",children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then the following resources should be running</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> name                      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> type      </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> onprem                    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> network   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["a HTTP call to ",(0,a.jsx)(n.code,{children:'"<uri>"'})," should result in the status ",(0,a.jsx)(n.code,{children:"<http response code>"})]}),"\n",(0,a.jsx)(n.p,{children:"This statement allows you to make an HTTP request to a URI and to check the HTTP status code returned. The given URI will be checked a number of times until the status code is matched or the check times out."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then a HTTP call to "http://consul-http.ingress.local.jmpd.in:8500/v1/status/leader" should result in status 200\n  And the response body should contain "10.6.0.200"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then a </span><span style="color: var(--shiki-token-constant)">HTTP</span><span style="color: var(--shiki-color-text)"> call to </span><span style="color: var(--shiki-token-string-expression)">&quot;http://consul-http.ingress.local.jmpd.in:8500/v1/status/leader&quot;</span><span style="color: var(--shiki-color-text)"> should result </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> status </span><span style="color: var(--shiki-token-constant)">200</span></span>\n<span><span style="color: var(--shiki-color-text)">  And the response body should contain </span><span style="color: var(--shiki-token-string-expression)">&quot;10.6.0.200&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["the response body should contain ",(0,a.jsx)(n.code,{children:'"<value>"'})]}),"\n",(0,a.jsx)(n.p,{children:"In addition to check the HTTP status code you can also check that a paricular text string is present in the response body."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then a HTTP call to "http://consul-http.ingress.local.jmpd.in:8500/v1/status/leader" should result in status 200\n  And the response body should contain "10.6.0.200"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then a </span><span style="color: var(--shiki-token-constant)">HTTP</span><span style="color: var(--shiki-color-text)"> call to </span><span style="color: var(--shiki-token-string-expression)">&quot;http://consul-http.ingress.local.jmpd.in:8500/v1/status/leader&quot;</span><span style="color: var(--shiki-color-text)"> should result </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> status </span><span style="color: var(--shiki-token-constant)">200</span></span>\n<span><span style="color: var(--shiki-color-text)">  And the response body should contain </span><span style="color: var(--shiki-token-string-expression)">&quot;10.6.0.200&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["the info ",(0,a.jsx)(n.code,{children:'"<jsonPath>"'})," for the running ",(0,a.jsx)(n.code,{children:'"<type>"'})," called ",(0,a.jsx)(n.code,{children:'"<name>"'})," should equal ",(0,a.jsx)(n.code,{children:'"<value>"'})]}),"\n",(0,a.jsx)(n.p,{children:"This statement allows you to check the value in the resource info for the given type and name. You can query any of the parameters and values\nsuch as ports, volumes, networks, startup commands, etc."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n  And the info "{.HostConfig.PortBindings[\'8500/\'][0].HostPort}" for the running "container" called "consul" should equal "8500"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  And the info </span><span style="color: var(--shiki-token-string-expression)">&quot;{.HostConfig.PortBindings[&#39;8500/&#39;][0].HostPort}&quot;</span><span style="color: var(--shiki-color-text)"> for the running </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span><span style="color: var(--shiki-color-text)"> should equal </span><span style="color: var(--shiki-token-string-expression)">&quot;8500&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["the info ",(0,a.jsx)(n.code,{children:'"<jsonPath>"'})," for the running ",(0,a.jsx)(n.code,{children:'"<type>"'})," called ",(0,a.jsx)(n.code,{children:'"<name>"'})," should contain ",(0,a.jsx)(n.code,{children:'"<value>"'})]}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n  And the info "{.HostConfig.PortBindings[\'8500/\'][0].HostPort}" for the running "container" called "consul" should contain "85"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  And the info </span><span style="color: var(--shiki-token-string-expression)">&quot;{.HostConfig.PortBindings[&#39;8500/&#39;][0].HostPort}&quot;</span><span style="color: var(--shiki-color-text)"> for the running </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span><span style="color: var(--shiki-color-text)"> should contain </span><span style="color: var(--shiki-token-string-expression)">&quot;85&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["the info ",(0,a.jsx)(n.code,{children:'"<jsonPath>"'})," for the running ",(0,a.jsx)(n.code,{children:'"<type>"'})," called ",(0,a.jsx)(n.code,{children:'"<name>"'})," should exist`"]}),"\n",(0,a.jsx)(n.p,{children:"Checks that there is a value at the given jsonPath for the type and that the value is not null"}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n  And the info "{.HostConfig.PortBindings[\'8500/\'][0].HostPort}" for the running "container" exists"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  And the info </span><span style="color: var(--shiki-token-string-expression)">&quot;{.HostConfig.PortBindings[&#39;8500/&#39;][0].HostPort}&quot;</span><span style="color: var(--shiki-color-text)"> for the running </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> exists</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["when I run the command ",(0,a.jsx)(n.code,{children:'"<command>"'})]}),"\n",(0,a.jsx)(n.p,{children:"Allows a command or executable script to be used as an assertion. The test runner executes the command and stores the result, the value\nof which can be asserted by future statements."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n  When I run the command "curl https://localhost:8500/v1/status"\n  Then I expect the exit code to be 0\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  When </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> run the command </span><span style="color: var(--shiki-token-string-expression)">&quot;curl https://localhost:8500/v1/status&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> expect the exit code to be </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h4,{children:"when I run the script"}),"\n",(0,a.jsx)(n.p,{children:"Executes an inline script the results of which can be used for a future assertion."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n  When I run the script\n    ```\n      #!/bin/bash\n      curl http://localhost:8500/v1/status\n    ```\n  Then I expect the exit code to be 0\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  When </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> run the script</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">```</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">      #!/bin/bash</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">      curl http://localhost:8500/v1/status</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">    ```</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> expect the exit code to be </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["I expect the exit code to be ",(0,a.jsx)(n.code,{children:"<code>"})]}),"\n",(0,a.jsx)(n.p,{children:"Assertion statement to be used with the script or command execution statement."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n  When I run the script\n    ```\n      #!/bin/bash\n      curl http://localhost:8500/v1/status\n    ```\n  Then I expect the exit code to be 0\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  When </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> run the script</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">```</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">      #!/bin/bash</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">      curl http://localhost:8500/v1/status</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">    ```</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> expect the exit code to be </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span></span>'})}),"\n",(0,a.jsxs)(n.h4,{children:["I expect the response to contain ",(0,a.jsx)(n.code,{children:'"<value>"'})]}),"\n",(0,a.jsx)(n.p,{children:"Assertion statement to be used with the script or command execution statement."}),"\n",(0,a.jsx)(n.p,{children:"This assertion may contain a partial string which is matched in the output from the command or script, or\ncan be a simple regular experession."}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint\n  Given I have a running blueprint\n  Then there should be a "container" running called "consul"\n  When I run the script\n    ```\n      #!/bin/bash\n      curl http://localhost:8500/v1/status\n    ```\n  Then I expect the exit code to be 0\n  And I expect the response to contain "8500"\n  And I expect the response to contain "`[0-9]{4}`"\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then there should be a </span><span style="color: var(--shiki-token-string-expression)">&quot;container&quot;</span><span style="color: var(--shiki-color-text)"> running called </span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  When </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> run the script</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">```</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">      #!/bin/bash</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">      curl http://localhost:8500/v1/status</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">    ```</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> expect the exit code to be </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span><span style="color: var(--shiki-color-text)">  And </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> expect the response to contain </span><span style="color: var(--shiki-token-string-expression)">&quot;8500&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  And </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> expect the response to contain </span><span style="color: var(--shiki-token-string-expression)">&quot;`[0-9]{4}`&quot;</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h3,{children:"Matrix testing"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to simple tests it is possible to excute a test multiple times using a matrix of values. In the below example the Scenario would run once for every line specified in the ",(0,a.jsx)(n.code,{children:"Examples"})," table."]}),"\n",(0,a.jsxs)(n.p,{children:["Values from the ",(0,a.jsx)(n.code,{children:"Examples"})," table can be interpolated at runtime by including the column name encapsulated by ",(0,a.jsx)(n.code,{children:"<>"})," in your test statements. In the below example the environment variables ",(0,a.jsx)(n.code,{children:"CONSUL_VERSION"})," and ",(0,a.jsx)(n.code,{children:"ENVOY_VERSION"})," would be dynamically set to the values from the ",(0,a.jsx)(n.code,{children:"Example"})," table."]}),"\n",(0,a.jsx)(n.pre,{language:"javascript",code:'Scenario: Single Container from Local Blueprint with multiple runs\n  Given the environment variable "CONSUL_VERSION" has a value "<consul>"\n  And the environment variable "ENVOY_VERSION" has a value "<envoy>"\n  And I have a running blueprint\n  Then the following resources should be running\n    | name                      | type      |\n    | onprem                    | network   |\n    | consul                    | container |\n    | envoy                     | sidecar   |\n    | consul-container-http     | ingress   |\n  And a HTTP call to "http://consul-http.ingress.local.jmpd.in:8500/v1/status/leader" should result in status 200\n  And the response body should contain "10.6.0.200"\n  Examples:\n    | consul            | envoy    |\n    | 1.8.0             | 1.14.3   |\n    | 1.7.3             | 1.14.3   |\n',children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<span><span style="color: var(--shiki-color-text)">Scenario</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> Single Container from Local Blueprint </span><span style="color: var(--shiki-token-keyword)">with</span><span style="color: var(--shiki-color-text)"> multiple runs</span></span>\n<span><span style="color: var(--shiki-color-text)">  Given the environment variable </span><span style="color: var(--shiki-token-string-expression)">&quot;CONSUL_VERSION&quot;</span><span style="color: var(--shiki-color-text)"> has a value </span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;consul&gt;&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  And the environment variable </span><span style="color: var(--shiki-token-string-expression)">&quot;ENVOY_VERSION&quot;</span><span style="color: var(--shiki-color-text)"> has a value </span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;envoy&gt;&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  And </span><span style="color: var(--shiki-token-constant)">I</span><span style="color: var(--shiki-color-text)"> have a running blueprint</span></span>\n<span><span style="color: var(--shiki-color-text)">  Then the following resources should be running</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> name                      </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> type      </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> onprem                    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> network   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul                    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> container </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> envoy                     </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> sidecar   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">http     </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> ingress   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">  And a </span><span style="color: var(--shiki-token-constant)">HTTP</span><span style="color: var(--shiki-color-text)"> call to </span><span style="color: var(--shiki-token-string-expression)">&quot;http://consul-http.ingress.local.jmpd.in:8500/v1/status/leader&quot;</span><span style="color: var(--shiki-color-text)"> should result </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> status </span><span style="color: var(--shiki-token-constant)">200</span></span>\n<span><span style="color: var(--shiki-color-text)">  And the response body should contain </span><span style="color: var(--shiki-token-string-expression)">&quot;10.6.0.200&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  Examples</span><span style="color: var(--shiki-token-punctuation)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> consul            </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> envoy    </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.8</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">             </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.14</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.7</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">             </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.14</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">|</span></span>\n<span></span>'})}),"\n",(0,a.jsx)(n.h3,{children:"Example Resource Info"}),"\n",(0,a.jsx)(n.pre,{language:"json",code:'[\n  {\n      "Id": "12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384",\n      "Created": "2020-08-15T07:55:19.2839915Z",\n      "Path": "/entrypoint.sh",\n      "Args": [\n          "/etc/docker/registry/config.yml"\n      ],\n      "State": {\n          "Status": "running",\n          "Running": true,\n          "Paused": false,\n          "Restarting": false,\n          "OOMKilled": false,\n          "Dead": false,\n          "Pid": 31362,\n          "ExitCode": 0,\n          "Error": "",\n          "StartedAt": "2020-08-15T07:55:19.556512Z",\n          "FinishedAt": "0001-01-01T00:00:00Z"\n      },\n      "Image": "sha256:2d4f4b5309b1e41b4f83ae59b44df6d673ef44433c734b14c1c103ebca82c116",\n      "ResolvConfPath": "/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/resolv.conf",\n      "HostnamePath": "/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/hostname",\n      "HostsPath": "/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/hosts",\n      "LogPath": "/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384-json.log",\n      "Name": "/docker-registry.container.shipyard.run",\n      "RestartCount": 0,\n      "Driver": "overlay2",\n      "Platform": "linux",\n      "MountLabel": "",\n      "ProcessLabel": "",\n      "AppArmorProfile": "",\n      "ExecIDs": null,\n      "HostConfig": {\n          "Binds": null,\n          "ContainerIDFile": "",\n          "LogConfig": {\n              "Type": "json-file",\n              "Config": {}\n          },\n          "NetworkMode": "default",\n          "PortBindings": {},\n          "RestartPolicy": {\n              "Name": "",\n              "MaximumRetryCount": 0\n          },\n          "AutoRemove": false,\n          "VolumeDriver": "",\n          "VolumesFrom": null,\n          "CapAdd": null,\n          "CapDrop": null,\n          "Capabilities": null,\n          "Dns": null,\n          "DnsOptions": null,\n          "DnsSearch": null,\n          "ExtraHosts": null,\n          "GroupAdd": null,\n          "IpcMode": "shareable",\n          "Cgroup": "",\n          "Links": null,\n          "OomScoreAdj": 0,\n          "PidMode": "",\n          "Privileged": false,\n          "PublishAllPorts": false,\n          "ReadonlyRootfs": false,\n          "SecurityOpt": null,\n          "UTSMode": "",\n          "UsernsMode": "",\n          "ShmSize": 67108864,\n          "Runtime": "runc",\n          "ConsoleSize": [\n              0,\n              0\n          ],\n          "Isolation": "",\n          "CpuShares": 0,\n          "Memory": 0,\n          "NanoCpus": 0,\n          "CgroupParent": "",\n          "BlkioWeight": 0,\n          "BlkioWeightDevice": null,\n          "BlkioDeviceReadBps": null,\n          "BlkioDeviceWriteBps": null,\n          "BlkioDeviceReadIOps": null,\n          "BlkioDeviceWriteIOps": null,\n          "CpuPeriod": 0,\n          "CpuQuota": 0,\n          "CpuRealtimePeriod": 0,\n          "CpuRealtimeRuntime": 0,\n          "CpusetCpus": "",\n          "CpusetMems": "",\n          "Devices": null,\n          "DeviceCgroupRules": null,\n          "DeviceRequests": null,\n          "KernelMemory": 0,\n          "KernelMemoryTCP": 0,\n          "MemoryReservation": 0,\n          "MemorySwap": 0,\n          "MemorySwappiness": null,\n          "OomKillDisable": false,\n          "PidsLimit": null,\n          "Ulimits": null,\n          "CpuCount": 0,\n          "CpuPercent": 0,\n          "IOMaximumIOps": 0,\n          "IOMaximumBandwidth": 0,\n          "MaskedPaths": [\n              "/proc/asound",\n              "/proc/acpi",\n              "/proc/kcore",\n              "/proc/keys",\n              "/proc/latency_stats",\n              "/proc/timer_list",\n              "/proc/timer_stats",\n              "/proc/sched_debug",\n              "/proc/scsi",\n              "/sys/firmware"\n          ],\n          "ReadonlyPaths": [\n              "/proc/bus",\n              "/proc/fs",\n              "/proc/irq",\n              "/proc/sys",\n              "/proc/sysrq-trigger"\n          ]\n      },\n      "GraphDriver": {\n          "Data": {\n              "LowerDir": "/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e-init/diff:/var/lib/docker/overlay2/98bff9ef7ca85776c6de7e3966efb47ff675a7f39841812590c0f08024a5e6f6/diff:/var/lib/docker/overlay2/2c2723404c2f0bcd1e1d266a87baa2b00b1d05b81b39727d0e0df55fe38244a6/diff:/var/lib/docker/overlay2/13744e9a9a26f3abced77f48ac025ca19d420788dba2664cc16eb1a9ae0fed87/diff:/var/lib/docker/overlay2/3e51403fbee392da29a33b1b04e4a4edb63bb814104b54c8ab274451ca920bb7/diff:/var/lib/docker/overlay2/f4e46ecd765e54f0421ace91045c54d8916e98c6667d18eb72f5a5c8b3ee37ca/diff",\n              "MergedDir": "/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e/merged",\n              "UpperDir": "/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e/diff",\n              "WorkDir": "/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e/work"\n          },\n          "Name": "overlay2"\n      },\n      "Mounts": [\n          {\n              "Type": "volume",\n              "Name": "92d6f9cfce128c3df23dcb5f5622f17e3ae2d94a2bd7c202f564f28970aebcf1",\n              "Source": "/var/lib/docker/volumes/92d6f9cfce128c3df23dcb5f5622f17e3ae2d94a2bd7c202f564f28970aebcf1/_data",\n              "Destination": "/var/lib/registry",\n              "Driver": "local",\n              "Mode": "",\n              "RW": true,\n              "Propagation": ""\n          }\n      ],\n      "Config": {\n          "Hostname": "docker_registry",\n          "Domainname": "",\n          "User": "",\n          "AttachStdin": true,\n          "AttachStdout": true,\n          "AttachStderr": true,\n          "ExposedPorts": {\n              "5000/tcp": {}\n          },\n          "Tty": false,\n          "OpenStdin": false,\n          "StdinOnce": false,\n          "Env": [\n              "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\n          ],\n          "Cmd": [\n              "/etc/docker/registry/config.yml"\n          ],\n          "Image": "registry:2",\n          "Volumes": {\n              "/var/lib/registry": {}\n          },\n          "WorkingDir": "",\n          "Entrypoint": [\n              "/entrypoint.sh"\n          ],\n          "OnBuild": null,\n          "Labels": {}\n      },\n      "NetworkSettings": {\n          "Bridge": "",\n          "SandboxID": "ea49aece32ef31f629762575fda1665e84e55a5aa5419131f7c04e75926e6a28",\n          "HairpinMode": false,\n          "LinkLocalIPv6Address": "",\n          "LinkLocalIPv6PrefixLen": 0,\n          "Ports": {\n              "5000/tcp": null\n          },\n          "SandboxKey": "/var/run/docker/netns/ea49aece32ef",\n          "SecondaryIPAddresses": null,\n          "SecondaryIPv6Addresses": null,\n          "EndpointID": "",\n          "Gateway": "",\n          "GlobalIPv6Address": "",\n          "GlobalIPv6PrefixLen": 0,\n          "IPAddress": "",\n          "IPPrefixLen": 0,\n          "IPv6Gateway": "",\n          "MacAddress": "",\n          "Networks": {\n              "local": {\n                  "IPAMConfig": null,\n                  "Links": null,\n                  "Aliases": [\n                      "12ef40e9fe22"\n                  ],\n                  "NetworkID": "87bcf0c4fd53cd692d6f74470e70bc47844661b6a00847576ccd01ceac077a2c",\n                  "EndpointID": "4fd2e0cfc32fb3e84a5cae643839b8ca1217005967a477d18eaa3f3dff68083a",\n                  "Gateway": "10.5.0.1",\n                  "IPAddress": "10.5.0.2",\n                  "IPPrefixLen": 16,\n                  "IPv6Gateway": "",\n                  "GlobalIPv6Address": "",\n                  "GlobalIPv6PrefixLen": 0,\n                  "MacAddress": "02:42:0a:05:00:02",\n                  "DriverOpts": null\n              }\n          }\n      }\n  }\n]\n',children:(0,a.jsx)(n.code,{className:"language-json",children:'<span><span style="color: var(--shiki-color-text)">[</span></span>\n<span><span style="color: var(--shiki-color-text)">  {</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Id&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Created&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;2020-08-15T07:55:19.2839915Z&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Path&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/entrypoint.sh&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Args&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&quot;/etc/docker/registry/config.yml&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;State&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Status&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;running&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Running&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Paused&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Restarting&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;OOMKilled&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Dead&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Pid&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">31362</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ExitCode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Error&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;StartedAt&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;2020-08-15T07:55:19.556512Z&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;FinishedAt&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0001-01-01T00:00:00Z&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Image&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;sha256:2d4f4b5309b1e41b4f83ae59b44df6d673ef44433c734b14c1c103ebca82c116&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;ResolvConfPath&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/resolv.conf&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;HostnamePath&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/hostname&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;HostsPath&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/hosts&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;LogPath&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/containers/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384/12ef40e9fe223f6de4b35701bed261975aed38ca0b5639f5c69d788ceceff384-json.log&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Name&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/docker-registry.container.shipyard.run&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;RestartCount&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Driver&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;overlay2&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Platform&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;linux&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;MountLabel&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;ProcessLabel&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;AppArmorProfile&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;ExecIDs&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;HostConfig&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Binds&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ContainerIDFile&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;LogConfig&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Type&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;json-file&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Config&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;NetworkMode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;default&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;PortBindings&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {}</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;RestartPolicy&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Name&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;MaximumRetryCount&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;AutoRemove&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;VolumeDriver&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;VolumesFrom&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CapAdd&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CapDrop&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Capabilities&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Dns&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;DnsOptions&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;DnsSearch&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ExtraHosts&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;GroupAdd&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;IpcMode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;shareable&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Cgroup&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Links&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;OomScoreAdj&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;PidMode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Privileged&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;PublishAllPorts&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ReadonlyRootfs&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;SecurityOpt&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;UTSMode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;UsernsMode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ShmSize&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">67108864</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Runtime&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;runc&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ConsoleSize&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">0</span></span>\n<span><span style="color: var(--shiki-color-text)">          ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Isolation&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpuShares&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Memory&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;NanoCpus&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CgroupParent&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;BlkioWeight&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;BlkioWeightDevice&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;BlkioDeviceReadBps&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;BlkioDeviceWriteBps&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;BlkioDeviceReadIOps&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;BlkioDeviceWriteIOps&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpuPeriod&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpuQuota&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpuRealtimePeriod&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpuRealtimeRuntime&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpusetCpus&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpusetMems&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Devices&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;DeviceCgroupRules&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;DeviceRequests&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;KernelMemory&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;KernelMemoryTCP&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;MemoryReservation&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;MemorySwap&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;MemorySwappiness&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;OomKillDisable&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;PidsLimit&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Ulimits&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpuCount&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;CpuPercent&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;IOMaximumIOps&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;IOMaximumBandwidth&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;MaskedPaths&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/asound&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/acpi&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/kcore&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/keys&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/latency_stats&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/timer_list&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/timer_stats&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/sched_debug&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/scsi&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/sys/firmware&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">          ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ReadonlyPaths&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/bus&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/fs&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/irq&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/sys&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/proc/sysrq-trigger&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">          ]</span></span>\n<span><span style="color: var(--shiki-color-text)">      }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;GraphDriver&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Data&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;LowerDir&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e-init/diff:/var/lib/docker/overlay2/98bff9ef7ca85776c6de7e3966efb47ff675a7f39841812590c0f08024a5e6f6/diff:/var/lib/docker/overlay2/2c2723404c2f0bcd1e1d266a87baa2b00b1d05b81b39727d0e0df55fe38244a6/diff:/var/lib/docker/overlay2/13744e9a9a26f3abced77f48ac025ca19d420788dba2664cc16eb1a9ae0fed87/diff:/var/lib/docker/overlay2/3e51403fbee392da29a33b1b04e4a4edb63bb814104b54c8ab274451ca920bb7/diff:/var/lib/docker/overlay2/f4e46ecd765e54f0421ace91045c54d8916e98c6667d18eb72f5a5c8b3ee37ca/diff&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;MergedDir&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e/merged&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;UpperDir&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e/diff&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;WorkDir&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/overlay2/41e99680e9e8515f09bd630b2c1c49500a05a8c3fbc28d7f07907941dcd4536e/work&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Name&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;overlay2&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Mounts&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">          {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Type&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;volume&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Name&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;92d6f9cfce128c3df23dcb5f5622f17e3ae2d94a2bd7c202f564f28970aebcf1&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Source&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/docker/volumes/92d6f9cfce128c3df23dcb5f5622f17e3ae2d94a2bd7c202f564f28970aebcf1/_data&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Destination&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/lib/registry&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Driver&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;local&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Mode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;RW&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;Propagation&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span></span>\n<span><span style="color: var(--shiki-color-text)">      ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;Config&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Hostname&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;docker_registry&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Domainname&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;User&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;AttachStdin&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;AttachStdout&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;AttachStderr&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;ExposedPorts&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;5000/tcp&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Tty&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;OpenStdin&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;StdinOnce&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Env&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">          ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Cmd&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/etc/docker/registry/config.yml&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">          ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Image&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;registry:2&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Volumes&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;/var/lib/registry&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;WorkingDir&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Entrypoint&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&quot;/entrypoint.sh&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">          ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;OnBuild&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Labels&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">      }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;NetworkSettings&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Bridge&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;SandboxID&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;ea49aece32ef31f629762575fda1665e84e55a5aa5419131f7c04e75926e6a28&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;HairpinMode&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;LinkLocalIPv6Address&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;LinkLocalIPv6PrefixLen&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Ports&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;5000/tcp&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;SandboxKey&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/var/run/docker/netns/ea49aece32ef&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;SecondaryIPAddresses&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;SecondaryIPv6Addresses&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;EndpointID&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Gateway&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;GlobalIPv6Address&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;GlobalIPv6PrefixLen&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;IPAddress&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;IPPrefixLen&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;IPv6Gateway&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;MacAddress&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">&quot;Networks&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">&quot;local&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;IPAMConfig&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;Links&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;Aliases&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">                      </span><span style="color: var(--shiki-token-string-expression)">&quot;12ef40e9fe22&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">                  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;NetworkID&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;87bcf0c4fd53cd692d6f74470e70bc47844661b6a00847576ccd01ceac077a2c&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;EndpointID&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;4fd2e0cfc32fb3e84a5cae643839b8ca1217005967a477d18eaa3f3dff68083a&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;Gateway&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.5.0.1&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;IPAddress&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.5.0.2&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;IPPrefixLen&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">16</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;IPv6Gateway&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;GlobalIPv6Address&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;GlobalIPv6PrefixLen&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;MacAddress&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;02:42:0a:05:00:02&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">&quot;DriverOpts&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>\n<span><span style="color: var(--shiki-color-text)">              }</span></span>\n<span><span style="color: var(--shiki-color-text)">          }</span></span>\n<span><span style="color: var(--shiki-color-text)">      }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>'})})]})}var r=!0;function i(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),s.components);return n?(0,a.jsx)(n,Object.assign({},s,{children:(0,a.jsx)(e,s)})):e(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=8183)}),_N_E=s.O()}]);